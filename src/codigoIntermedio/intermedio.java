
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Dec 15 22:06:18 CST 2013
//----------------------------------------------------

package codigoIntermedio;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.Collections;
import java.awt.Color;
import compilador_k.*;
import semantico.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Dec 15 22:06:18 CST 2013
  */
public class intermedio extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public intermedio() {super();}

  /** Constructor which sets the default scanner. */
  public intermedio(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public intermedio(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\163\000\002\002\004\000\002\006\003\000\002\011" +
    "\002\000\002\012\002\000\002\005\004\000\002\005\003" +
    "\000\002\030\002\000\002\013\015\000\002\013\011\000" +
    "\002\013\015\000\002\013\020\000\002\013\021\000\002" +
    "\013\024\000\002\013\025\000\002\031\002\000\002\013" +
    "\016\000\002\032\002\000\002\013\012\000\002\033\002" +
    "\000\002\013\012\000\002\034\002\000\002\013\015\000" +
    "\002\035\002\000\002\013\014\000\002\013\007\000\002" +
    "\013\007\000\002\013\007\000\002\013\012\000\002\036" +
    "\002\000\002\013\013\000\002\013\011\000\002\013\005" +
    "\000\002\013\006\000\002\013\010\000\002\013\007\000" +
    "\002\013\011\000\002\013\006\000\002\013\006\000\002" +
    "\013\006\000\002\013\004\000\002\013\010\000\002\013" +
    "\007\000\002\013\007\000\002\013\010\000\002\025\012" +
    "\000\002\025\011\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\004\003\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\010" +
    "\003\000\002\026\003\000\002\026\005\000\002\026\005" +
    "\000\002\021\005\000\002\021\004\000\002\023\004\000" +
    "\002\023\005\000\002\023\004\000\002\023\005\000\002" +
    "\023\004\000\002\023\005\000\002\024\005\000\002\024" +
    "\006\000\002\007\006\000\002\007\006\000\002\014\004" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\015\010\000\002\016\006\000\002\016\004\000\002" +
    "\017\005\000\002\017\003\000\002\017\005\000\002\017" +
    "\003\000\002\017\005\000\002\017\003\000\002\022\004" +
    "\000\002\022\004\000\002\022\006\000\002\022\006\000" +
    "\002\022\004\000\002\022\007\000\002\022\006\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\020\010\000\002\020\010\000\002\020\007" +
    "\000\002\020\007\000\002\020\005\000\002\020\007\000" +
    "\002\020\005\000\002\020\010\000\002\020\003\000\002" +
    "\020\005\000\002\020\003\000\002\020\011\000\002\020" +
    "\007\000\002\020\007\000\002\020\005\000\002\020\011" +
    "\000\002\020\007\000\002\020\014\000\002\020\012\000" +
    "\002\020\014\000\002\020\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0120\000\040\004\016\005\027\006\024\007\015\017" +
    "\031\022\012\027\005\030\020\031\022\032\007\033\013" +
    "\035\030\036\006\040\014\041\010\001\002\000\046\002" +
    "\ufffc\004\016\005\027\006\024\007\015\017\031\022\012" +
    "\025\ufffc\027\005\030\020\031\022\032\007\033\013\035" +
    "\030\036\006\040\014\041\010\046\ufffc\001\002\000\006" +
    "\007\uffcf\045\u0118\001\002\000\004\022\u0111\001\002\000" +
    "\004\007\uffce\001\002\000\004\022\u0108\001\002\000\004" +
    "\007\373\001\002\000\012\004\016\005\027\006\024\007" +
    "\354\001\002\000\004\022\305\001\002\000\004\022\264" +
    "\001\002\000\020\010\102\011\100\012\077\013\103\015" +
    "\244\020\uff9b\022\243\001\002\000\024\010\uffd3\011\uffd3" +
    "\012\uffd3\013\uffd3\020\uffd3\021\uffd3\023\uffd3\042\uffd3\043" +
    "\uffd3\001\002\000\004\002\242\001\002\000\004\007\uffcd" +
    "\001\002\000\004\007\156\001\002\000\004\007\uffcc\001" +
    "\002\000\004\020\155\001\002\000\024\010\uffd2\011\uffd2" +
    "\012\uffd2\013\uffd2\020\uffd2\021\uffd2\023\uffd2\042\uffd2\043" +
    "\uffd2\001\002\000\016\010\102\011\100\012\077\013\103" +
    "\020\uff99\023\uff99\001\002\000\004\002\000\001\002\000" +
    "\024\010\uffd1\011\uffd1\012\uffd1\013\uffd1\020\uffd1\021\uffd1" +
    "\023\uffd1\042\uffd1\043\uffd1\001\002\000\004\022\032\001" +
    "\002\000\004\007\uffcb\001\002\000\012\027\034\030\020" +
    "\031\022\032\007\001\002\000\004\007\073\001\002\000" +
    "\004\007\uffcf\001\002\000\004\020\036\001\002\000\004" +
    "\007\037\001\002\000\004\014\052\001\002\000\004\020" +
    "\041\001\002\000\004\007\042\001\002\000\004\026\051" +
    "\001\002\000\004\023\044\001\002\000\004\024\045\001" +
    "\002\000\040\004\ufff3\005\ufff3\006\ufff3\007\ufff3\017\ufff3" +
    "\022\ufff3\027\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\035" +
    "\ufff3\036\ufff3\040\ufff3\041\ufff3\001\002\000\040\004\016" +
    "\005\027\006\024\007\015\017\031\022\012\027\005\030" +
    "\020\031\022\032\007\033\013\035\030\036\006\040\014" +
    "\041\010\001\002\000\004\025\050\001\002\000\046\002" +
    "\ufff2\004\ufff2\005\ufff2\006\ufff2\007\ufff2\017\ufff2\022\ufff2" +
    "\025\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2\035" +
    "\ufff2\036\ufff2\040\ufff2\041\ufff2\046\ufff2\001\002\000\004" +
    "\023\uffbb\001\002\000\014\004\016\005\027\006\024\007" +
    "\053\016\055\001\002\000\014\020\uffb8\022\057\023\uffb8" +
    "\042\uffb8\043\uffb8\001\002\000\012\020\uffba\023\uffba\042" +
    "\uffba\043\uffba\001\002\000\014\020\uffd0\021\uffd0\023\uffd0" +
    "\042\uffd0\043\uffd0\001\002\000\012\020\uffb9\023\uffb9\042" +
    "\uffb9\043\uffb9\001\002\000\014\004\016\005\027\006\024" +
    "\007\060\016\055\001\002\000\006\021\071\023\uffb3\001" +
    "\002\000\006\021\067\023\uffb1\001\002\000\006\021\065" +
    "\023\uffaf\001\002\000\004\023\064\001\002\000\012\020" +
    "\uffb7\023\uffb7\042\uffb7\043\uffb7\001\002\000\014\004\016" +
    "\005\027\006\024\007\060\016\055\001\002\000\004\023" +
    "\uffb0\001\002\000\014\004\016\005\027\006\024\007\060" +
    "\016\055\001\002\000\004\023\uffb2\001\002\000\014\004" +
    "\016\005\027\006\024\007\060\016\055\001\002\000\004" +
    "\023\uffb4\001\002\000\004\015\074\001\002\000\012\004" +
    "\016\005\027\006\024\016\055\001\002\000\004\020\uffbd" +
    "\001\002\000\004\020\uffbc\001\002\000\024\004\uffa5\005" +
    "\uffa5\006\uffa5\007\uffa5\022\uffa5\027\uffa5\030\uffa5\031\uffa5" +
    "\032\uffa5\001\002\000\024\004\uffa6\005\uffa6\006\uffa6\007" +
    "\uffa6\022\uffa6\027\uffa6\030\uffa6\031\uffa6\032\uffa6\001\002" +
    "\000\024\004\016\005\027\006\024\007\106\022\012\027" +
    "\034\030\020\031\022\032\007\001\002\000\024\004\uffa7" +
    "\005\uffa7\006\uffa7\007\uffa7\022\uffa7\027\uffa7\030\uffa7\031" +
    "\uffa7\032\uffa7\001\002\000\024\004\uffa4\005\uffa4\006\uffa4" +
    "\007\uffa4\022\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4\001" +
    "\002\000\006\020\uff9a\023\uff9a\001\002\000\004\007\130" +
    "\001\002\000\022\010\102\011\100\012\077\013\103\015" +
    "\111\020\uff9b\022\110\023\uff9b\001\002\000\024\004\016" +
    "\005\027\006\024\007\106\022\012\027\034\030\020\031" +
    "\022\032\007\001\002\000\016\004\016\005\027\006\024" +
    "\007\060\016\055\023\120\001\002\000\012\004\016\005" +
    "\027\006\024\007\112\001\002\000\012\010\102\011\100" +
    "\012\077\013\103\001\002\000\012\010\102\011\100\012" +
    "\077\013\103\001\002\000\024\004\016\005\027\006\024" +
    "\007\106\022\012\027\034\030\020\031\022\032\007\001" +
    "\002\000\006\020\uffa0\023\uffa0\001\002\000\024\004\016" +
    "\005\027\006\024\007\106\022\012\027\034\030\020\031" +
    "\022\032\007\001\002\000\006\020\uffa1\023\uffa1\001\002" +
    "\000\016\010\102\011\100\012\077\013\103\020\uff9d\023" +
    "\uff9d\001\002\000\004\023\122\001\002\000\012\010\102" +
    "\011\100\012\077\013\103\001\002\000\024\004\016\005" +
    "\027\006\024\007\106\022\012\027\034\030\020\031\022" +
    "\032\007\001\002\000\006\020\uff9c\023\uff9c\001\002\000" +
    "\024\004\016\005\027\006\024\007\106\022\012\027\034" +
    "\030\020\031\022\032\007\001\002\000\006\020\uff9e\023" +
    "\uff9e\001\002\000\006\020\uff9f\023\uff9f\001\002\000\004" +
    "\015\131\001\002\000\014\004\016\005\027\006\024\007" +
    "\132\022\134\001\002\000\012\010\102\011\100\012\077" +
    "\013\103\001\002\000\012\010\102\011\100\012\077\013" +
    "\103\001\002\000\012\004\016\005\027\006\024\007\135" +
    "\001\002\000\012\010\102\011\100\012\077\013\103\001" +
    "\002\000\012\010\102\011\100\012\077\013\103\001\002" +
    "\000\024\004\016\005\027\006\024\007\106\022\012\027" +
    "\034\030\020\031\022\032\007\001\002\000\004\023\141" +
    "\001\002\000\016\010\102\011\100\012\077\013\103\020" +
    "\uff91\023\uff91\001\002\000\024\004\016\005\027\006\024" +
    "\007\106\022\012\027\034\030\020\031\022\032\007\001" +
    "\002\000\006\020\uff92\023\uff92\001\002\000\024\004\016" +
    "\005\027\006\024\007\106\022\012\027\034\030\020\031" +
    "\022\032\007\001\002\000\004\023\146\001\002\000\016" +
    "\010\102\011\100\012\077\013\103\020\uff8f\023\uff8f\001" +
    "\002\000\024\004\016\005\027\006\024\007\106\022\012" +
    "\027\034\030\020\031\022\032\007\001\002\000\006\020" +
    "\uff90\023\uff90\001\002\000\024\004\016\005\027\006\024" +
    "\007\106\022\012\027\034\030\020\031\022\032\007\001" +
    "\002\000\006\020\uffa3\023\uffa3\001\002\000\024\004\016" +
    "\005\027\006\024\007\106\022\012\027\034\030\020\031" +
    "\022\032\007\001\002\000\006\020\uffa2\023\uffa2\001\002" +
    "\000\046\002\uffda\004\uffda\005\uffda\006\uffda\007\uffda\017" +
    "\uffda\022\uffda\025\uffda\027\uffda\030\uffda\031\uffda\032\uffda" +
    "\033\uffda\035\uffda\036\uffda\040\uffda\041\uffda\046\uffda\001" +
    "\002\000\012\015\163\020\161\021\157\022\162\001\002" +
    "\000\004\007\240\001\002\000\004\020\237\001\002\000" +
    "\046\002\uffe2\004\uffe2\005\uffe2\006\uffe2\007\uffe2\017\uffe2" +
    "\022\uffe2\025\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033" +
    "\uffe2\035\uffe2\036\uffe2\040\uffe2\041\uffe2\046\uffe2\001\002" +
    "\000\014\023\202\027\034\030\020\031\022\032\007\001" +
    "\002\000\016\004\016\005\027\006\024\007\164\016\055" +
    "\022\134\001\002\000\016\010\102\011\100\012\077\013" +
    "\103\020\171\022\172\001\002\000\014\010\102\011\100" +
    "\012\077\013\103\020\170\001\002\000\004\020\167\001" +
    "\002\000\046\002\uffe9\004\uffe9\005\uffe9\006\uffe9\007\uffe9" +
    "\017\uffe9\022\uffe9\025\uffe9\027\uffe9\030\uffe9\031\uffe9\032" +
    "\uffe9\033\uffe9\035\uffe9\036\uffe9\040\uffe9\041\uffe9\046\uffe9" +
    "\001\002\000\046\002\uffe8\004\uffe8\005\uffe8\006\uffe8\007" +
    "\uffe8\017\uffe8\022\uffe8\025\uffe8\027\uffe8\030\uffe8\031\uffe8" +
    "\032\uffe8\033\uffe8\035\uffe8\036\uffe8\040\uffe8\041\uffe8\046" +
    "\uffe8\001\002\000\046\002\uffe7\004\uffe7\005\uffe7\006\uffe7" +
    "\007\uffe7\017\uffe7\022\uffe7\025\uffe7\027\uffe7\030\uffe7\031" +
    "\uffe7\032\uffe7\033\uffe7\035\uffe7\036\uffe7\040\uffe7\041\uffe7" +
    "\046\uffe7\001\002\000\016\004\016\005\027\006\024\007" +
    "\060\016\055\023\173\001\002\000\004\020\177\001\002" +
    "\000\004\023\175\001\002\000\004\020\176\001\002\000" +
    "\046\002\uffe6\004\uffe6\005\uffe6\006\uffe6\007\uffe6\017\uffe6" +
    "\022\uffe6\025\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033" +
    "\uffe6\035\uffe6\036\uffe6\040\uffe6\041\uffe6\046\uffe6\001\002" +
    "\000\046\002\uffe3\004\uffe3\005\uffe3\006\uffe3\007\uffe3\017" +
    "\uffe3\022\uffe3\025\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3" +
    "\033\uffe3\035\uffe3\036\uffe3\040\uffe3\041\uffe3\046\uffe3\001" +
    "\002\000\004\023\230\001\002\000\004\007\225\001\002" +
    "\000\004\024\203\001\002\000\040\004\uffeb\005\uffeb\006" +
    "\uffeb\007\uffeb\017\uffeb\022\uffeb\027\uffeb\030\uffeb\031\uffeb" +
    "\032\uffeb\033\uffeb\035\uffeb\036\uffeb\040\uffeb\041\uffeb\001" +
    "\002\000\040\004\016\005\027\006\024\007\015\017\031" +
    "\022\012\027\005\030\020\031\022\032\007\033\013\035" +
    "\030\036\006\040\014\041\010\001\002\000\004\046\207" +
    "\001\002\000\004\020\223\001\002\000\014\004\016\005" +
    "\027\006\024\007\210\016\055\001\002\000\016\010\102" +
    "\011\100\012\077\013\103\020\uffaa\022\216\001\002\000" +
    "\014\010\102\011\100\012\077\013\103\020\uffad\001\002" +
    "\000\004\020\uffae\001\002\000\024\004\016\005\027\006" +
    "\024\007\106\022\012\027\034\030\020\031\022\032\007" +
    "\001\002\000\004\020\uffab\001\002\000\024\004\016\005" +
    "\027\006\024\007\106\022\012\027\034\030\020\031\022" +
    "\032\007\001\002\000\016\004\016\005\027\006\024\007" +
    "\060\016\055\023\217\001\002\000\004\020\uffa8\001\002" +
    "\000\004\023\221\001\002\000\004\020\uffa9\001\002\000" +
    "\004\020\uffac\001\002\000\004\025\224\001\002\000\046" +
    "\002\uffea\004\uffea\005\uffea\006\uffea\007\uffea\017\uffea\022" +
    "\uffea\025\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033\uffea" +
    "\035\uffea\036\uffea\040\uffea\041\uffea\046\uffea\001\002\000" +
    "\006\021\226\023\uffb5\001\002\000\012\027\034\030\020" +
    "\031\022\032\007\001\002\000\004\023\uffb6\001\002\000" +
    "\004\024\231\001\002\000\040\004\uffed\005\uffed\006\uffed" +
    "\007\uffed\017\uffed\022\uffed\027\uffed\030\uffed\031\uffed\032" +
    "\uffed\033\uffed\035\uffed\036\uffed\040\uffed\041\uffed\001\002" +
    "\000\040\004\016\005\027\006\024\007\015\017\031\022" +
    "\012\027\005\030\020\031\022\032\007\033\013\035\030" +
    "\036\006\040\014\041\010\001\002\000\004\046\207\001" +
    "\002\000\004\020\235\001\002\000\004\025\236\001\002" +
    "\000\046\002\uffec\004\uffec\005\uffec\006\uffec\007\uffec\017" +
    "\uffec\022\uffec\025\uffec\027\uffec\030\uffec\031\uffec\032\uffec" +
    "\033\uffec\035\uffec\036\uffec\040\uffec\041\uffec\046\uffec\001" +
    "\002\000\046\002\uffe1\004\uffe1\005\uffe1\006\uffe1\007\uffe1" +
    "\017\uffe1\022\uffe1\025\uffe1\027\uffe1\030\uffe1\031\uffe1\032" +
    "\uffe1\033\uffe1\035\uffe1\036\uffe1\040\uffe1\041\uffe1\046\uffe1" +
    "\001\002\000\006\020\uffc6\021\157\001\002\000\004\020" +
    "\uffc7\001\002\000\004\002\001\001\002\000\016\004\016" +
    "\005\027\006\024\007\060\016\055\023\120\001\002\000" +
    "\014\004\016\005\027\006\024\007\245\016\055\001\002" +
    "\000\016\010\102\011\100\012\077\013\103\020\252\022" +
    "\253\001\002\000\014\010\102\011\100\012\077\013\103" +
    "\020\251\001\002\000\004\020\250\001\002\000\046\002" +
    "\uffdc\004\uffdc\005\uffdc\006\uffdc\007\uffdc\017\uffdc\022\uffdc" +
    "\025\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\035" +
    "\uffdc\036\uffdc\040\uffdc\041\uffdc\046\uffdc\001\002\000\046" +
    "\002\uffdb\004\uffdb\005\uffdb\006\uffdb\007\uffdb\017\uffdb\022" +
    "\uffdb\025\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb" +
    "\035\uffdb\036\uffdb\040\uffdb\041\uffdb\046\uffdb\001\002\000" +
    "\046\002\uffdd\004\uffdd\005\uffdd\006\uffdd\007\uffdd\017\uffdd" +
    "\022\uffdd\025\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033" +
    "\uffdd\035\uffdd\036\uffdd\040\uffdd\041\uffdd\046\uffdd\001\002" +
    "\000\016\004\016\005\027\006\024\007\060\016\055\023" +
    "\254\001\002\000\004\020\260\001\002\000\004\023\256" +
    "\001\002\000\004\020\257\001\002\000\046\002\uffde\004" +
    "\uffde\005\uffde\006\uffde\007\uffde\017\uffde\022\uffde\025\uffde" +
    "\027\uffde\030\uffde\031\uffde\032\uffde\033\uffde\035\uffde\036" +
    "\uffde\040\uffde\041\uffde\046\uffde\001\002\000\046\002\uffe0" +
    "\004\uffe0\005\uffe0\006\uffe0\007\uffe0\017\uffe0\022\uffe0\025" +
    "\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\035\uffe0" +
    "\036\uffe0\040\uffe0\041\uffe0\046\uffe0\001\002\000\004\023" +
    "\262\001\002\000\014\010\102\011\100\012\077\013\103" +
    "\020\263\001\002\000\046\002\uffdf\004\uffdf\005\uffdf\006" +
    "\uffdf\007\uffdf\017\uffdf\022\uffdf\025\uffdf\027\uffdf\030\uffdf" +
    "\031\uffdf\032\uffdf\033\uffdf\035\uffdf\036\uffdf\040\uffdf\041" +
    "\uffdf\046\uffdf\001\002\000\006\007\265\016\055\001\002" +
    "\000\004\023\303\001\002\000\006\021\267\023\271\001" +
    "\002\000\014\004\016\005\027\006\024\007\275\016\055" +
    "\001\002\000\004\023\273\001\002\000\004\020\272\001" +
    "\002\000\046\002\uffd8\004\uffd8\005\uffd8\006\uffd8\007\uffd8" +
    "\017\uffd8\022\uffd8\025\uffd8\027\uffd8\030\uffd8\031\uffd8\032" +
    "\uffd8\033\uffd8\035\uffd8\036\uffd8\040\uffd8\041\uffd8\046\uffd8" +
    "\001\002\000\004\020\274\001\002\000\046\002\uffd9\004" +
    "\uffd9\005\uffd9\006\uffd9\007\uffd9\017\uffd9\022\uffd9\025\uffd9" +
    "\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\035\uffd9\036" +
    "\uffd9\040\uffd9\041\uffd9\046\uffd9\001\002\000\006\021\267" +
    "\023\uffc5\001\002\000\006\021\267\023\uffc3\001\002\000" +
    "\006\021\267\023\uffc1\001\002\000\004\023\uffc0\001\002" +
    "\000\004\023\uffc2\001\002\000\004\023\uffc4\001\002\000" +
    "\004\020\304\001\002\000\046\002\uffd7\004\uffd7\005\uffd7" +
    "\006\uffd7\007\uffd7\017\uffd7\022\uffd7\025\uffd7\027\uffd7\030" +
    "\uffd7\031\uffd7\032\uffd7\033\uffd7\035\uffd7\036\uffd7\040\uffd7" +
    "\041\uffd7\046\uffd7\001\002\000\004\007\037\001\002\000" +
    "\004\023\314\001\002\000\010\023\uffca\042\311\043\310" +
    "\001\002\000\004\007\037\001\002\000\004\007\037\001" +
    "\002\000\004\023\uffc9\001\002\000\004\023\uffc8\001\002" +
    "\000\004\024\315\001\002\000\040\004\016\005\027\006" +
    "\024\007\015\017\031\022\012\027\005\030\020\031\022" +
    "\032\007\033\013\035\030\036\006\040\014\041\010\001" +
    "\002\000\004\025\317\001\002\000\052\002\ufff9\004\ufff9" +
    "\005\ufff9\006\ufff9\007\ufff9\017\ufff9\022\ufff9\025\ufff9\027" +
    "\ufff9\030\ufff9\031\ufff9\032\ufff9\033\ufff9\034\321\035\ufff9" +
    "\036\ufff9\037\320\040\ufff9\041\ufff9\046\ufff9\001\002\000" +
    "\004\022\325\001\002\000\004\024\322\001\002\000\040" +
    "\004\016\005\027\006\024\007\015\017\031\022\012\027" +
    "\005\030\020\031\022\032\007\033\013\035\030\036\006" +
    "\040\014\041\010\001\002\000\004\025\324\001\002\000" +
    "\046\002\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8\017\ufff8" +
    "\022\ufff8\025\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8\033" +
    "\ufff8\035\ufff8\036\ufff8\040\ufff8\041\ufff8\046\ufff8\001\002" +
    "\000\004\007\037\001\002\000\004\023\327\001\002\000" +
    "\004\024\330\001\002\000\040\004\016\005\027\006\024" +
    "\007\015\017\031\022\012\027\005\030\020\031\022\032" +
    "\007\033\013\035\030\036\006\040\014\041\010\001\002" +
    "\000\004\025\332\001\002\000\052\002\ufff7\004\ufff7\005" +
    "\ufff7\006\ufff7\007\ufff7\017\ufff7\022\ufff7\025\ufff7\027\ufff7" +
    "\030\ufff7\031\ufff7\032\ufff7\033\ufff7\034\334\035\ufff7\036" +
    "\ufff7\037\333\040\ufff7\041\ufff7\046\ufff7\001\002\000\004" +
    "\022\345\001\002\000\004\024\342\001\002\000\050\002" +
    "\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6\017\ufff6\022\ufff6" +
    "\025\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6\033\ufff6\034" +
    "\336\035\ufff6\036\ufff6\040\ufff6\041\ufff6\046\ufff6\001\002" +
    "\000\004\024\337\001\002\000\040\004\016\005\027\006" +
    "\024\007\015\017\031\022\012\027\005\030\020\031\022" +
    "\032\007\033\013\035\030\036\006\040\014\041\010\001" +
    "\002\000\004\025\341\001\002\000\046\002\ufff4\004\ufff4" +
    "\005\ufff4\006\ufff4\007\ufff4\017\ufff4\022\ufff4\025\ufff4\027" +
    "\ufff4\030\ufff4\031\ufff4\032\ufff4\033\ufff4\035\ufff4\036\ufff4" +
    "\040\ufff4\041\ufff4\046\ufff4\001\002\000\040\004\016\005" +
    "\027\006\024\007\015\017\031\022\012\027\005\030\020" +
    "\031\022\032\007\033\013\035\030\036\006\040\014\041" +
    "\010\001\002\000\004\025\344\001\002\000\046\002\ufff5" +
    "\004\ufff5\005\ufff5\006\ufff5\007\ufff5\017\ufff5\022\ufff5\025" +
    "\ufff5\027\ufff5\030\ufff5\031\ufff5\032\ufff5\033\ufff5\035\ufff5" +
    "\036\ufff5\040\ufff5\041\ufff5\046\ufff5\001\002\000\004\007" +
    "\037\001\002\000\004\023\347\001\002\000\004\024\350" +
    "\001\002\000\040\004\016\005\027\006\024\007\015\017" +
    "\031\022\012\027\005\030\020\031\022\032\007\033\013" +
    "\035\030\036\006\040\014\041\010\001\002\000\004\025" +
    "\352\001\002\000\052\002\uffd4\004\uffd4\005\uffd4\006\uffd4" +
    "\007\uffd4\017\uffd4\022\uffd4\025\uffd4\027\uffd4\030\uffd4\031" +
    "\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037\333" +
    "\040\uffd4\041\uffd4\046\uffd4\001\002\000\050\002\uffd5\004" +
    "\uffd5\005\uffd5\006\uffd5\007\uffd5\017\uffd5\022\uffd5\025\uffd5" +
    "\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035" +
    "\uffd5\036\uffd5\040\uffd5\041\uffd5\046\uffd5\001\002\000\012" +
    "\010\102\011\100\012\077\013\103\001\002\000\014\010" +
    "\102\011\100\012\077\013\103\023\357\001\002\000\024" +
    "\004\016\005\027\006\024\007\106\022\012\027\034\030" +
    "\020\031\022\032\007\001\002\000\016\010\102\011\100" +
    "\012\077\013\103\020\uff95\023\uff95\001\002\000\024\004" +
    "\016\005\027\006\024\007\106\022\012\027\034\030\020" +
    "\031\022\032\007\001\002\000\006\020\uff96\023\uff96\001" +
    "\002\000\004\023\363\001\002\000\016\010\102\011\100" +
    "\012\077\013\103\020\uff97\023\uff97\001\002\000\024\004" +
    "\016\005\027\006\024\007\106\022\012\027\034\030\020" +
    "\031\022\032\007\001\002\000\006\020\uff98\023\uff98\001" +
    "\002\000\024\004\016\005\027\006\024\007\106\022\012" +
    "\027\034\030\020\031\022\032\007\001\002\000\004\023" +
    "\370\001\002\000\016\010\102\011\100\012\077\013\103" +
    "\020\uff93\023\uff93\001\002\000\024\004\016\005\027\006" +
    "\024\007\106\022\012\027\034\030\020\031\022\032\007" +
    "\001\002\000\006\020\uff94\023\uff94\001\002\000\004\022" +
    "\374\001\002\000\014\023\376\027\034\030\020\031\022" +
    "\032\007\001\002\000\004\023\u0103\001\002\000\004\024" +
    "\377\001\002\000\040\004\uffef\005\uffef\006\uffef\007\uffef" +
    "\017\uffef\022\uffef\027\uffef\030\uffef\031\uffef\032\uffef\033" +
    "\uffef\035\uffef\036\uffef\040\uffef\041\uffef\001\002\000\040" +
    "\004\016\005\027\006\024\007\015\017\031\022\012\027" +
    "\005\030\020\031\022\032\007\033\013\035\030\036\006" +
    "\040\014\041\010\001\002\000\004\025\u0102\001\002\000" +
    "\046\002\uffee\004\uffee\005\uffee\006\uffee\007\uffee\017\uffee" +
    "\022\uffee\025\uffee\027\uffee\030\uffee\031\uffee\032\uffee\033" +
    "\uffee\035\uffee\036\uffee\040\uffee\041\uffee\046\uffee\001\002" +
    "\000\004\024\u0104\001\002\000\040\004\uffe5\005\uffe5\006" +
    "\uffe5\007\uffe5\017\uffe5\022\uffe5\027\uffe5\030\uffe5\031\uffe5" +
    "\032\uffe5\033\uffe5\035\uffe5\036\uffe5\040\uffe5\041\uffe5\001" +
    "\002\000\040\004\016\005\027\006\024\007\015\017\031" +
    "\022\012\027\005\030\020\031\022\032\007\033\013\035" +
    "\030\036\006\040\014\041\010\001\002\000\004\025\u0107" +
    "\001\002\000\046\002\uffe4\004\uffe4\005\uffe4\006\uffe4\007" +
    "\uffe4\017\uffe4\022\uffe4\025\uffe4\027\uffe4\030\uffe4\031\uffe4" +
    "\032\uffe4\033\uffe4\035\uffe4\036\uffe4\040\uffe4\041\uffe4\046" +
    "\uffe4\001\002\000\004\016\055\001\002\000\004\021\u010a" +
    "\001\002\000\004\044\u010e\001\002\000\004\023\u010c\001" +
    "\002\000\004\020\u010d\001\002\000\046\002\uffd6\004\uffd6" +
    "\005\uffd6\006\uffd6\007\uffd6\017\uffd6\022\uffd6\025\uffd6\027" +
    "\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\035\uffd6\036\uffd6" +
    "\040\uffd6\041\uffd6\046\uffd6\001\002\000\004\007\u010f\001" +
    "\002\000\006\021\u010a\023\uffbf\001\002\000\004\023\uffbe" +
    "\001\002\000\004\007\037\001\002\000\004\023\u0113\001" +
    "\002\000\004\024\u0114\001\002\000\040\004\ufff1\005\ufff1" +
    "\006\ufff1\007\ufff1\017\ufff1\022\ufff1\027\ufff1\030\ufff1\031" +
    "\ufff1\032\ufff1\033\ufff1\035\ufff1\036\ufff1\040\ufff1\041\ufff1" +
    "\001\002\000\040\004\016\005\027\006\024\007\015\017" +
    "\031\022\012\027\005\030\020\031\022\032\007\033\013" +
    "\035\030\036\006\040\014\041\010\001\002\000\004\025" +
    "\u0117\001\002\000\046\002\ufff0\004\ufff0\005\ufff0\006\ufff0" +
    "\007\ufff0\017\ufff0\022\ufff0\025\ufff0\027\ufff0\030\ufff0\031" +
    "\ufff0\032\ufff0\033\ufff0\035\ufff0\036\ufff0\040\ufff0\041\ufff0" +
    "\046\ufff0\001\002\000\004\022\u0119\001\002\000\004\023" +
    "\u011a\001\002\000\004\024\u011b\001\002\000\040\004\ufffb" +
    "\005\ufffb\006\ufffb\007\ufffb\017\ufffb\022\ufffb\027\ufffb\030" +
    "\ufffb\031\ufffb\032\ufffb\033\ufffb\035\ufffb\036\ufffb\040\ufffb" +
    "\041\ufffb\001\002\000\040\004\016\005\027\006\024\007" +
    "\015\017\031\022\012\027\005\030\020\031\022\032\007" +
    "\033\013\035\030\036\006\040\014\041\010\001\002\000" +
    "\004\046\u011e\001\002\000\010\004\016\005\027\006\024" +
    "\001\002\000\004\020\u0120\001\002\000\004\025\u0121\001" +
    "\002\000\046\002\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa" +
    "\017\ufffa\022\ufffa\025\ufffa\027\ufffa\030\ufffa\031\ufffa\032" +
    "\ufffa\033\ufffa\035\ufffa\036\ufffa\040\ufffa\041\ufffa\046\ufffa" +
    "\001\002\000\010\002\ufffd\025\ufffd\046\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0120\000\020\002\020\003\024\005\025\006\016\010" +
    "\010\013\003\020\022\001\001\000\016\002\020\003\024" +
    "\005\u0121\010\010\013\003\020\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\354\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\100\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\002\032" +
    "\007\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\045" +
    "\001\001\000\016\002\020\003\024\005\046\010\010\013" +
    "\003\020\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\053\004\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\003\060\004\061\017\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\060\004\061\017" +
    "\065\001\001\000\002\001\001\000\010\003\060\004\061" +
    "\017\067\001\001\000\002\001\001\000\010\003\060\004" +
    "\061\017\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\074\004\075\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\002\104\003\024\020\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\106\001\001\000\010\002\104\003\024\020\126\001" +
    "\001\000\010\003\060\004\061\017\120\001\001\000\004" +
    "\003\112\001\001\000\004\027\115\001\001\000\004\027" +
    "\113\001\001\000\010\002\104\003\024\020\114\001\001" +
    "\000\002\001\001\000\010\002\104\003\024\020\116\001" +
    "\001\000\002\001\001\000\004\027\124\001\001\000\002" +
    "\001\001\000\004\027\122\001\001\000\010\002\104\003" +
    "\024\020\123\001\001\000\002\001\001\000\010\002\104" +
    "\003\024\020\125\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\132\001\001\000\004" +
    "\027\152\001\001\000\004\027\150\001\001\000\004\003" +
    "\135\001\001\000\004\027\143\001\001\000\004\027\136" +
    "\001\001\000\010\002\104\003\024\020\137\001\001\000" +
    "\002\001\001\000\004\027\141\001\001\000\010\002\104" +
    "\003\024\020\142\001\001\000\002\001\001\000\010\002" +
    "\104\003\024\020\144\001\001\000\002\001\001\000\004" +
    "\027\146\001\001\000\010\002\104\003\024\020\147\001" +
    "\001\000\002\001\001\000\010\002\104\003\024\020\151" +
    "\001\001\000\002\001\001\000\010\002\104\003\024\020" +
    "\153\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\157\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\002\200\016\177\001\001\000\006" +
    "\003\164\004\165\001\001\000\004\027\152\001\001\000" +
    "\004\027\150\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\060\004" +
    "\061\017\173\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\035\203\001\001\000\016\002\020\003\024\005\204\010" +
    "\010\013\003\020\022\001\001\000\004\022\205\001\001" +
    "\000\002\001\001\000\006\003\210\004\211\001\001\000" +
    "\004\027\214\001\001\000\004\027\212\001\001\000\002" +
    "\001\001\000\010\002\104\003\024\020\213\001\001\000" +
    "\002\001\001\000\010\002\104\003\024\020\221\001\001" +
    "\000\010\003\060\004\061\017\217\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\002\200\016\226\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\034\231\001\001\000\016\002\020\003" +
    "\024\005\232\010\010\013\003\020\022\001\001\000\004" +
    "\022\233\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\240\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\060\004" +
    "\061\017\260\001\001\000\006\003\245\004\246\001\001" +
    "\000\004\027\115\001\001\000\004\027\113\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\003\060\004\061\017\254\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\122\001\001\000\002\001\001\000\004\004\265\001\001" +
    "\000\002\001\001\000\004\023\267\001\001\000\006\003" +
    "\275\004\276\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\301\001\001\000\004\023\300\001\001\000\004" +
    "\023\277\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\306\026\305\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\015\306\026\312\001\001\000\006\015\306" +
    "\026\311\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\002\020\003\024\005\315\010\010" +
    "\013\003\020\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\002\020" +
    "\003\024\005\322\010\010\013\003\020\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\306\026\325" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\002" +
    "\020\003\024\005\330\010\010\013\003\020\022\001\001" +
    "\000\002\001\001\000\004\025\334\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\002\020\003\024\005\337\010\010\013\003\020" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\002\020\003\024\005\342\010\010\013\003\020\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\015\306" +
    "\026\345\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\002\020\003\024\005\350\010\010\013\003\020\022" +
    "\001\001\000\002\001\001\000\004\025\352\001\001\000" +
    "\002\001\001\000\004\027\365\001\001\000\004\027\355" +
    "\001\001\000\010\002\104\003\024\020\361\001\001\000" +
    "\004\027\357\001\001\000\010\002\104\003\024\020\360" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\363\001\001\000\010\002\104\003\024\020\364\001\001" +
    "\000\002\001\001\000\010\002\104\003\024\020\366\001" +
    "\001\000\002\001\001\000\004\027\370\001\001\000\010" +
    "\002\104\003\024\020\371\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\002\200\016\374\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\377\001\001\000" +
    "\016\002\020\003\024\005\u0100\010\010\013\003\020\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\036\u0104\001\001\000\016\002\020\003\024" +
    "\005\u0105\010\010\013\003\020\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\u0108\001\001\000\004" +
    "\024\u010a\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\u010f\001\001\000\002\001\001\000\006\015\306\026" +
    "\u0111\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\u0114\001\001\000\016\002\020\003\024\005\u0115\010" +
    "\010\013\003\020\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\u011b\001\001\000\016\002\020\003\024" +
    "\005\u011c\010\010\013\003\020\022\001\001\000\002\001" +
    "\001\000\004\003\u011e\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$intermedio$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$intermedio$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$intermedio$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



public String ambito = "inicio";
tablaSimbolos tablaSim;
public ArrayList<String> paramsId = new ArrayList<String>();

public ArrayList<String> getLiterals(){
    
    return action_obj.mensajes;
}
public ArrayList<Cuadruplo> getCuadruplos(){
	
	return action_obj.cuadruplos;
}
public void agregarAmbito(String ambi){
    ambito = ambito + "." +ambi;
}
public String resetAmbito(){
    String ambito_nuevo = ambito.substring(ambito.lastIndexOf("."));
    ambito = ambito.substring(0,ambito.lastIndexOf("."));
    return ambito_nuevo;
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$intermedio$actions {


tablaSimbolos tablaSim = Interfaz.tabla;
TablaCuadruplos tablaCuad = new TablaCuadruplos();
ArrayList<Cuadruplo> cuadruplos = new ArrayList<Cuadruplo>();
ArrayList<String> mensajes=new ArrayList<String>();

int temp_cont =0;
int etq_cont =0;
int sig_cuad =0;

public void addMsg(String s){
	mensajes.add(s);
}
public void gen(String op, String arg1, String arg2, String res){
    Cuadruplo cuad = new Cuadruplo(op,arg1,arg2,res);
    tablaCuad.AgregarCuad(cuad);
    cuadruplos.add(cuad);
    sig_cuad = tablaCuad.tabla_cuad.size();
}
public void gen(String op, String arg1, String res){
    Cuadruplo cuad = new Cuadruplo(op,arg1,res);
    tablaCuad.AgregarCuad(cuad);
    cuadruplos.add(cuad);
    sig_cuad = tablaCuad.tabla_cuad.size();
}
public void gen(String op,String res){
    Cuadruplo cuad = new Cuadruplo(op,res);
    tablaCuad.AgregarCuad(cuad);
    cuadruplos.add(cuad);
    sig_cuad = tablaCuad.tabla_cuad.size();
}
public void gen(String op, String arg1, String arg2,String res,String ambito){
    Cuadruplo cuad = new Cuadruplo(op,arg1,arg2,res,ambito);
    tablaCuad.AgregarCuad(cuad);
    cuadruplos.add(cuad);
    sig_cuad = tablaCuad.tabla_cuad.size();
    
}

public String temp_nuevo(){
    return "t"+(temp_cont++);
}
public String etiq_nueva(){
    return "_etiq"+(etq_cont++);
}
public void completa(Lista lista,String etiq){
    Lista.completa(lista,etiq);
}
public Lista fusiona(Lista lista1,Lista lista2){
    return Lista.fusiona(lista1,lista2);
}

  private final intermedio parser;

  /** Constructor */
  CUP$intermedio$actions(intermedio parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$intermedio$do_action(
    int                        CUP$intermedio$act_num,
    java_cup.runtime.lr_parser CUP$intermedio$parser,
    java.util.Stack            CUP$intermedio$stack,
    int                        CUP$intermedio$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$intermedio$result;

      /* select the action based on the action number */
      switch (CUP$intermedio$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // op_aritmeticas ::= tipos ID ASSIGNATIONS PAR_LEFT ID operaciones op_aritmeticas PAR_RIGHT 
            {
              result RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-7)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-7)).right;
		result tipo = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-6)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)).right;
		String asig = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).right;
		result op = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).value;
		int op_aleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).left;
		int op_aright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).right;
		result op_a = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).left;
		int prright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$intermedio$stack.peek()).value;
		result opr = (result)op;
                   result op_ar=(result)op_a;
                   String t = temp_nuevo();
                   gen(opr.valor.toString(),id1.toString(),op_ar.valor.toString(),t,parser.ambito);
                   gen("=",t,id.toString());
                 
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",14, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-7)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // op_aritmeticas ::= tipos ID ASSIGNATIONS PAR_LEFT ID operaciones op_aritmeticas PAR_RIGHT operaciones op_aritmeticas 
            {
              result RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-9)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-9)).right;
		result tipo = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-8)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-7)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-7)).right;
		String asig = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-7)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-6)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-6)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-6)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).right;
		result op = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).value;
		int op_aleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).left;
		int op_aright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).right;
		result op_a = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).right;
		result op2 = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).value;
		int op_a2left = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).left;
		int op_a2right = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).right;
		result op_a2 = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.peek()).value;
		result opr = (result)op;
                   result op_ar=(result)op_a;
                   result opr2 = (result)op2;
                   result op_ar2=(result)op_a2;
                   String t = temp_nuevo();
                   String t2 = temp_nuevo();
                   gen(opr.valor.toString(),id.toString(),op_ar.valor.toString(),t,parser.ambito);
                   gen(opr2.valor.toString(),t,op_ar2.valor.toString(),t2);
                   gen("=",t2,id.toString());
                 
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",14, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-9)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // op_aritmeticas ::= tipos ID ASSIGNATIONS PAR_LEFT literal operaciones op_aritmeticas PAR_RIGHT 
            {
              result RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-7)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-7)).right;
		result tipo = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-6)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)).right;
		String asig = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).right;
		result lit = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).right;
		result op = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).value;
		int op_aleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).left;
		int op_aright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).right;
		result op_a = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).left;
		int prright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$intermedio$stack.peek()).value;
		result litr = (result)lit;
                   result opr = (result)op;
                   result op_ar=(result)op_a;
                   String t = temp_nuevo();
                   gen(opr.valor.toString(),litr.valor.toString(),op_ar.valor.toString(),t,parser.ambito);
                   gen("=",t,id.toString());
            
                 
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",14, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-7)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // op_aritmeticas ::= tipos ID ASSIGNATIONS PAR_LEFT literal operaciones op_aritmeticas PAR_RIGHT operaciones op_aritmeticas 
            {
              result RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-9)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-9)).right;
		result tipo = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-8)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-7)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-7)).right;
		String asig = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-7)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-6)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-6)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-6)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)).right;
		result lit = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).right;
		result op = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).value;
		int op_aleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).left;
		int op_aright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).right;
		result op_a = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).right;
		result op2 = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).value;
		int op_a2left = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).left;
		int op_a2right = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).right;
		result op_a2 = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.peek()).value;
		result litr = (result)lit;
                   result opr = (result)op;
                   result op_ar=(result)op_a;
                   result opr2 = (result)op2;
                   result op_ar2=(result)op_a2;
                   String t = temp_nuevo();
                   String t2 = temp_nuevo();
                   gen(opr.valor.toString(),litr.valor.toString(),op_ar.valor.toString(),t,parser.ambito);
                   gen(opr2.valor.toString(),t,op_ar2.valor.toString(),t2);
                   gen("=",t2,id.toString());
                 
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",14, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-9)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // op_aritmeticas ::= PAR_LEFT ID operaciones op_aritmeticas PAR_RIGHT 
            {
              result RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).right;
		result op = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).value;
		int op_aleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).left;
		int op_aright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).right;
		result op_a = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).left;
		int prright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$intermedio$stack.peek()).value;
		result opr = (result)op;
                   result op_ar=(result)op_a;
                   String t =temp_nuevo();
                   gen(opr.valor.toString(),id.toString(),op_ar.valor.toString(),t);
                   RESULT = new result(t);
                 
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",14, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // op_aritmeticas ::= PAR_LEFT ID operaciones op_aritmeticas PAR_RIGHT operaciones op_aritmeticas 
            {
              result RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-6)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-6)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).right;
		result op = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).value;
		int op_aleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).left;
		int op_aright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).right;
		result op_a = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).right;
		result op2 = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).value;
		int op_a2left = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).left;
		int op_a2right = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).right;
		result op_a2 = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.peek()).value;
		result opr = (result)op;
                   result op_ar=(result)op_a;
                   result opr2 = (result)op2;
                   result op_ar2=(result)op_a2;
                   String t =temp_nuevo();
                   String t2 =temp_nuevo();
                   gen(opr.valor.toString(),id.toString(),op_ar.valor.toString(),t);
                   gen(opr2.valor.toString(),t,op_ar2.valor.toString(),t2);
                   RESULT = new result(t2);

                 
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",14, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-6)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // op_aritmeticas ::= PAR_LEFT literal PAR_RIGHT 
            {
              result RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).right;
		result lit = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).left;
		int prright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$intermedio$stack.peek()).value;
		result litr = (result)lit;
                   RESULT = litr;
                 
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",14, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // op_aritmeticas ::= PAR_LEFT literal PAR_RIGHT operaciones op_aritmeticas 
            {
              result RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).right;
		result lit = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).right;
		result op = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).value;
		int op_aleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).left;
		int op_aright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).right;
		result op_a = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.peek()).value;
		result litr = (result)lit;
                   result opr = (result)op;
                   result op_ar=(result)op_a;
                   String t =temp_nuevo();
                   gen(opr.valor.toString(),litr.valor.toString(),op_ar.valor.toString(),t);
                   RESULT = new result(t);
                 
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",14, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // op_aritmeticas ::= PAR_LEFT literal operaciones op_aritmeticas PAR_RIGHT 
            {
              result RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).right;
		result lit = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).right;
		result op = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).value;
		int op_aleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).left;
		int op_aright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).right;
		result op_a = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).left;
		int prright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$intermedio$stack.peek()).value;
		result litr = (result)lit;
                   result opr = (result)op;
                   result op_ar=(result)op_a;
                   String t =temp_nuevo();
                   gen(opr.valor.toString(),litr.valor.toString(),op_ar.valor.toString(),t);
                   RESULT = new result(t);
                 
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",14, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // op_aritmeticas ::= PAR_LEFT literal operaciones op_aritmeticas PAR_RIGHT operaciones op_aritmeticas 
            {
              result RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-6)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-6)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-6)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)).right;
		result lit = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).right;
		result op = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).value;
		int op_aleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).left;
		int op_aright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).right;
		result op_a = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).right;
		result op2 = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).value;
		int op_a2left = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).left;
		int op_a2right = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).right;
		result op_a2 = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.peek()).value;
		result litr = (result)lit;
                   result opr = (result)op;
                   result op_ar=(result)op_a;
                   result opr2 = (result)op2;
                   result op_ar2=(result)op_a2;
                   String t =temp_nuevo();
                   String t2 =temp_nuevo();
                   gen(opr.valor.toString(),litr.valor.toString(),op_ar.valor.toString(),t);
                   gen(opr2.valor.toString(),t,op_ar2.valor.toString(),t2);
                   RESULT = new result(t2);
                 
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",14, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-6)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // op_aritmeticas ::= literal 
            {
              result RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).right;
		result lit = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.peek()).value;
		result litr = (result)lit;
                   RESULT = litr;
                  
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",14, ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // op_aritmeticas ::= literal operaciones op_aritmeticas 
            {
              result RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).right;
		result lit = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).right;
		result op = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).value;
		int op_aleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).left;
		int op_aright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).right;
		result op_a = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.peek()).value;
		result litr = (result)lit;
                   result opr = (result)op;
                   result op_ar=(result)op_a;
                   String t = temp_nuevo();
                   //gen("=",op_ar.valor.toString(),t);
                   gen(opr.valor.toString(),litr.valor.toString(),op_ar.valor.toString(),t);
                   RESULT = new result(t);
                 
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",14, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // op_aritmeticas ::= ID 
            {
              result RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.peek()).value;
		RESULT= new result(id.toString());
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",14, ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // op_aritmeticas ::= ID PAR_LEFT lista_parametros2 PAR_RIGHT operaciones op_aritmeticas 
            {
              result RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).right;
		result op = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).value;
		int op_aleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).left;
		int op_aright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).right;
		result op_a = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.peek()).value;
		Collections.reverse(parser.paramsId);
                   result opr = (result)op;
                   result op_ar=(result)op_a;
                   String t = temp_nuevo();
                   String t2 = temp_nuevo();
                    for(String i: parser.paramsId){
                        gen("param",i.toString());
                    }
                    parser.paramsId.clear();
                    gen("call","_"+id.toString());
                    gen("=","ret",t);
                    gen(opr.valor.toString(),t,op_ar.valor.toString(),t2);
                    RESULT =new result(t2);
              
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",14, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // op_aritmeticas ::= ID PAR_LEFT PAR_RIGHT 
            {
              result RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).value;
		String t = temp_nuevo();
                    gen("call",id.toString());
                    gen("ret",t);
                    RESULT = new result(t);
                    
                
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",14, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // op_aritmeticas ::= ID PAR_LEFT PAR_RIGHT operaciones op_aritmeticas 
            {
              result RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).right;
		result op = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).value;
		int op_aleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).left;
		int op_aright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).right;
		result op_a = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.peek()).value;
		result opr = (result)op;
                   result op_ar=(result)op_a;
                   String t = temp_nuevo();
                   String t2 = temp_nuevo();
                   gen("call",id.toString());
                   gen("=","ret",t2);
                   gen(opr.valor.toString(),t2,op_ar.valor.toString(),t); 
                   RESULT = new result(t);
                
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",14, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // op_aritmeticas ::= ID operaciones op_aritmeticas 
            {
              result RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).right;
		result op = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).value;
		int op_aleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).left;
		int op_aright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).right;
		result op_a = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.peek()).value;
		result opr = (result)op;
                   result op_ar=(result)op_a;
                   String t = temp_nuevo();
                   gen(opr.valor.toString(),id.toString(),op_ar.valor.toString(),t);
                   RESULT = new result(t);
                 
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",14, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // op_aritmeticas ::= ID ASSIGNATIONS literal operaciones op_aritmeticas 
            {
              result RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).right;
		String asig = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).right;
		result lit = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).right;
		result op = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).value;
		int op_aleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).left;
		int op_aright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).right;
		result op_a = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.peek()).value;
		result opr = (result)op;
                   result litr =(result)lit;
                   result op_ar=(result)op_a;
                   String t = temp_nuevo();
                   gen(opr.valor.toString(),litr.valor.toString(),op_ar.valor.toString(),t);
                   gen(asig,t,id.toString());
                 
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",14, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // op_aritmeticas ::= ID ASSIGNATIONS ID operaciones op_aritmeticas 
            {
              result RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).right;
		String asig = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).right;
		result op = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).value;
		int op_aleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).left;
		int op_aright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).right;
		result op_a = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.peek()).value;
		result opr = (result)op;
                    result op_ar=(result)op_a;
                    String t = temp_nuevo();
                    gen(opr.valor.toString(),id1.toString(),op_ar.valor.toString(),t);
                    gen(asig,t,id.toString());
                  
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",14, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // op_aritmeticas ::= tipos ID ASSIGNATIONS ID operaciones op_aritmeticas 
            {
              result RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)).right;
		result tipo = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).right;
		String asig = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).right;
		result op = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).value;
		int op_aleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).left;
		int op_aright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).right;
		result op_a = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.peek()).value;
		result opr = (result)op;
                    result op_ar=(result)op_a;
                    String t = temp_nuevo();
                    gen(opr.valor.toString(),id1.toString(),op_ar.valor.toString(),t,parser.ambito);
                    gen(asig,t,id.toString());
                   
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",14, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // op_aritmeticas ::= tipos ID ASSIGNATIONS literal operaciones op_aritmeticas 
            {
              result RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)).right;
		result tipo = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).right;
		String asig = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).right;
		result lit = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).right;
		result op = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).value;
		int op_aleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).left;
		int op_aright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).right;
		result op_a = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.peek()).value;
		result litr = (result)lit;
                    result opr = (result)op;
                    result op_ar=(result)op_a;
                    String t = temp_nuevo();
                    //gen(asig,op_ar.valor.toString(),t,"",parser.ambito);
                    gen(opr.valor.toString(),litr.valor.toString(),op_ar.valor.toString(),t);
                    gen(asig,t,id.toString());
                   
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",14, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // operaciones ::= DIV 
            {
              result RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.peek()).value;
		RESULT =new result(op.toString());
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("operaciones",21, ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // operaciones ::= MULT 
            {
              result RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.peek()).value;
		RESULT =new result(op.toString());
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("operaciones",21, ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // operaciones ::= PLUS 
            {
              result RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.peek()).value;
		RESULT =new result(op.toString());
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("operaciones",21, ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // operaciones ::= MINUS 
            {
              result RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.peek()).value;
		RESULT =new result(op.toString());
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("operaciones",21, ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // return_value ::= RETURN ID PAR_LEFT PAR_RIGHT 
            {
              result RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).value;

              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("return_value",16, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // return_value ::= RETURN ID PAR_LEFT lista_parametros2 PAR_RIGHT 
            {
              result RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).right;
		result par = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).value;
		gen("ret",id.toString());
                parser.paramsId.clear();
                RESULT= new result(id.toString());
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("return_value",16, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // return_value ::= RETURN ID 
            {
              result RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.peek()).value;
		gen("ret",id.toString());
                RESULT = new result(id.toString());
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("return_value",16, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // return_value ::= RETURN literal operaciones op_aritmeticas 
            {
              result RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).right;
		result lit = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).right;
		result op = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).value;
		int op_aleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).left;
		int op_aright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).right;
		result op_a = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.peek()).value;
		result litr =(result)lit;
                      //parser.paramsId.add(litr.valor.toString()); 
                      gen("ret",litr.valor.toString());
                
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("return_value",16, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // return_value ::= RETURN ID operaciones op_aritmeticas 
            {
              result RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).right;
		result op = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).value;
		int op_aleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).left;
		int op_aright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).right;
		result op_a = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.peek()).value;
		result opr = (result)op;
                  result op_ar =(result)op_a;
                gen("ret",id.toString());
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("return_value",16, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // return_value ::= RETURN literal 
            {
              result RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).right;
		result lit = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.peek()).value;
		result litr =(result)lit;
                      //parser.paramsId.add(litr.valor.toString()); 
                      gen("ret",litr.valor.toString());
                RESULT = litr;
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("return_value",16, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // return_value ::= RETURN literal_String 
            {
              result RESULT =null;
		int st_litleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).left;
		int st_litright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).right;
		result st_lit = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.peek()).value;
		result litr =(result)st_lit;
                     // parser.paramsId.add(litr.valor.toString()); 
                      gen("ret",litr.valor.toString());
                RESULT = litr;
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("return_value",16, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // lista_parametros2 ::= literal_String 
            {
              result RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).right;
		result lit = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.peek()).value;
		result litr =(result)lit;
                      parser.paramsId.add(litr.valor.toString()); 
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("lista_parametros2",13, ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // lista_parametros2 ::= literal_String COMMA lista_parametros2 
            {
              result RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).right;
		result lit = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).value;
		result litr =(result)lit;
                      parser.paramsId.add(litr.valor.toString()); 
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("lista_parametros2",13, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // lista_parametros2 ::= literal 
            {
              result RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).right;
		result lit = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.peek()).value;
		result litr =(result)lit;
                      parser.paramsId.add(litr.valor.toString()); 
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("lista_parametros2",13, ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // lista_parametros2 ::= literal COMMA lista_parametros2 
            {
              result RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).right;
		result lit = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).value;
		result litr =(result)lit;
                      parser.paramsId.add(litr.valor.toString()); 
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("lista_parametros2",13, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // lista_parametros2 ::= ID 
            {
              result RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.peek()).value;
		 parser.paramsId.add(id.toString());
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("lista_parametros2",13, ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // lista_parametros2 ::= ID COMMA lista_parametros2 
            {
              result RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).value;
		parser.paramsId.add(id.toString());
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("lista_parametros2",13, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // lista_parametros ::= tipos ID 
            {
              result RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).right;
		result tipo = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.peek()).value;

              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("lista_parametros",12, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // lista_parametros ::= tipos ID COMMA lista_parametros 
            {
              result RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).right;
		result tipo = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).value;

              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("lista_parametros",12, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // assignaciones ::= ID OPERADORES ID PAR_LEFT lista_parametros2 PAR_RIGHT 
            {
              result RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).value;
		 gen("if"+op.toString(),id.toString(),id1.toString(),"");
                 gen("GOTO","");
                  String t = id.toString()+op.toString()  +id1.toString(); 
                  parser.paramsId.clear();
                  RESULT= new result(t);   
                
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("assignaciones",11, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // assignaciones ::= ID OPERADORES ID 
            {
              result RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.peek()).value;
		 gen("if"+op.toString(),id.toString(),id1.toString(),"");
                 gen("GOTO","");
               String t = id.toString()+op.toString()  +id1.toString(); 
                RESULT= new result(t);
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("assignaciones",11, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // assignaciones ::= ID OPERADORES literal_String 
            {
              result RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).right;
		result lit = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.peek()).value;
		
                result litr = (result)lit;
                 gen("if"+op.toString(),id.toString(),litr.valor.toString(),"");
                 gen("GOTO","");
               String t = id.toString()+op.toString()  +litr.valor.toString(); 
                RESULT= new result(t);
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("assignaciones",11, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // assignaciones ::= ID OPERADORES literal 
            {
              result RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).right;
		result lit = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.peek()).value;
		result litr = (result)lit;
                 gen("if"+op.toString(),id.toString(),litr.valor.toString(),"");
                 gen("GOTO","");
                String t = id.toString()+op.toString()  +litr.valor.toString(); 
                RESULT= new result(t);
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("assignaciones",11, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // incremento ::= ID INCREMENTADORES 
            {
              result RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).value;
		int incleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).left;
		int incright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).right;
		String inc = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.peek()).value;
		RESULT = new result(inc.toString()); 
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("incremento",10, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // inicial ::= tipos ID ASSIGNATIONS literal_String 
            {
              result RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).right;
		result tipo = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).right;
		result lit = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.peek()).value;
		result litr = (result)lit;
              gen("=",litr.valor.toString(),id.toString());
              gen("Etiq","");
            
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("inicial",5, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // inicial ::= tipos ID ASSIGNATIONS literal 
            {
              result RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).right;
		result tipo = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).right;
		result lit = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.peek()).value;
		result litr = (result)lit;
              gen("=",litr.valor.toString(),id.toString());
              gen("Etiq","");
            
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("inicial",5, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // lista_assig3 ::= COMMA AMPERSAND ID lista_assig3 
            {
              result RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).value;

              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("lista_assig3",18, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // lista_assig3 ::= COMMA AMPERSAND ID 
            {
              result RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.peek()).value;
		RESULT = new result(id.toString());
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("lista_assig3",18, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // lista_assig2 ::= COMMA literal_String lista_assig2 
            {
              result RESULT =null;

              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("lista_assig2",17, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // lista_assig2 ::= COMMA literal_String 
            {
              result RESULT =null;

              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("lista_assig2",17, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // lista_assig2 ::= COMMA literal lista_assig2 
            {
              result RESULT =null;

              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("lista_assig2",17, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // lista_assig2 ::= COMMA literal 
            {
              result RESULT =null;

              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("lista_assig2",17, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // lista_assig2 ::= COMMA ID lista_assig2 
            {
              result RESULT =null;

              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("lista_assig2",17, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // lista_assig2 ::= COMMA ID 
            {
              result RESULT =null;

              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("lista_assig2",17, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // lista_assig ::= COMMA ID 
            {
              result RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.peek()).value;

              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("lista_assig",15, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // lista_assig ::= COMMA ID lista_assig 
            {
              result RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).value;

              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("lista_assig",15, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // asig_or_and ::= assignaciones AND asig_or_and 
            {
              result RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).right;
		result asig = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).value;
		RESULT = new result(asig.valor.toString());
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("asig_or_and",20, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // asig_or_and ::= assignaciones OR asig_or_and 
            {
              result RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).right;
		result asig = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).value;
		RESULT = new result(asig.valor.toString());
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("asig_or_and",20, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // asig_or_and ::= assignaciones 
            {
              result RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).right;
		result asig = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.peek()).value;
		
                RESULT = new result(asig.valor.toString());
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("asig_or_and",20, ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // tipo_void ::= VOID 
            {
              result RESULT =null;
		RESULT = new result("void");
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("tipo_void",6, ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tipos ::= FLOAT 
            {
              result RESULT =null;
		RESULT = new result("float");
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("tipos",0, ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // tipos ::= STRING 
            {
              result RESULT =null;
		RESULT = new result("string");
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("tipos",0, ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // tipos ::= CHAR 
            {
              result RESULT =null;
		RESULT = new result("char");
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("tipos",0, ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // tipos ::= INT 
            {
              result RESULT =null;
		RESULT = new result("integer");
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("tipos",0, ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // literal_String ::= STRING_LITERAL 
            {
              result RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).right;
		Object sl = (Object)((java_cup.runtime.Symbol) CUP$intermedio$stack.peek()).value;
		 addMsg(sl.toString());
                     RESULT= new result((sl.toString()),new stringType()); 
                  
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("literal_String",2, ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // literal ::= FLOAT_LITERAL 
            {
              result RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).right;
		Object fl = (Object)((java_cup.runtime.Symbol) CUP$intermedio$stack.peek()).value;
		  RESULT= new result((fl.toString()),new floatType()); 
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // literal ::= CHAR_LITERAL 
            {
              result RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).right;
		Object cl = (Object)((java_cup.runtime.Symbol) CUP$intermedio$stack.peek()).value;
		addMsg(cl.toString()); 
             RESULT= new result((cl.toString()),new charType()); 
            
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // literal ::= INT_LITERAL 
            {
              result RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()).right;
		Object il = (Object)((java_cup.runtime.Symbol) CUP$intermedio$stack.peek()).value;
		  RESULT= new result((il.toString()),new integerType()); 
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // elseif_stment ::= ELSEIF PAR_LEFT asig_or_and PAR_RIGHT BRACK_LEFT statements BRACK_RIGHT 
            {
              result RESULT =null;

              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("elseif_stment",19, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-6)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // elseif_stment ::= ELSEIF PAR_LEFT asig_or_and PAR_RIGHT BRACK_LEFT statements BRACK_RIGHT elseif_stment 
            {
              result RESULT =null;

              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("elseif_stment",19, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-7)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statement ::= SCANF PAR_LEFT literal_String lista_assig3 PAR_RIGHT SEMICOLON 
            {
              result RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).right;
		result lit = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).right;
		result lista = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).value;
		result litr = (result)lit;
                result listar = (result)lista;
               gen("scanf","","",listar.valor.toString(),parser.ambito);
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement ::= PRINTF PAR_LEFT ID PAR_RIGHT SEMICOLON 
            {
              result RESULT =null;
		int prleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).value;
		gen("printf","","",id.toString(),parser.ambito);
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statement ::= PRINTF PAR_LEFT literal_String PAR_RIGHT SEMICOLON 
            {
              result RESULT =null;
		int prleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).right;
		result lit = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).value;
		result litr = (result)lit;
                gen("printf","","",litr.valor.toString(),parser.ambito);
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement ::= PRINTF PAR_LEFT literal_String lista_assig2 PAR_RIGHT SEMICOLON 
            {
              result RESULT =null;
		int prleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).right;
		result lit = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).value;
		result litr = (result)lit;
                gen("printf","","",litr.valor.toString(),parser.ambito);
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statement ::= op_aritmeticas SEMICOLON 
            {
              result RESULT =null;

              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement ::= ID ASSIGNATIONS literal SEMICOLON 
            {
              result RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).right;
		String asig = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).right;
		result lit = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).value;
		 result idr = new result(id.toString());
                result litr = (result)lit;
                 String t = temp_nuevo();
                 gen(asig,litr.valor.toString(),t);
                gen(asig,t,id.toString());
                //tablaCuad.PrintTablaCuad();
               RESULT = idr;
              
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement ::= ID ASSIGNATIONS literal_String SEMICOLON 
            {
              result RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).right;
		String asig = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).right;
		result lit = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).value;
		result idr = new result(id.toString());
                 result litr = (result)lit;
                 String t = temp_nuevo();
                 gen(asig,litr.valor.toString(),t);
                gen(asig,t,id.toString());
                RESULT = idr;
              
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement ::= ID ASSIGNATIONS ID SEMICOLON 
            {
              result RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).right;
		String asig = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).value;
		
                String t = temp_nuevo();
                gen(asig,id1.toString(),t);
                gen(asig,t,id.toString());
                RESULT =new result(id.toString());
              
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement ::= ID ASSIGNATIONS ID PAR_LEFT lista_parametros2 PAR_RIGHT SEMICOLON 
            {
              result RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-6)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)).right;
		String asig = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).value;
		Collections.reverse(parser.paramsId);
                for(String i: parser.paramsId){
                    gen("param",i.toString());
                }
                    gen("call","_"+id1.toString());
                    String t = temp_nuevo();
                    gen(asig,"ret",t);
                    gen(asig,t,id.toString());

                    parser.paramsId.clear();
                    RESULT =new result(id.toString());
              
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-6)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement ::= ID PAR_LEFT lista_parametros2 PAR_RIGHT SEMICOLON 
            {
              result RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).value;
		Collections.reverse(parser.paramsId);
                for(String i: parser.paramsId){
                    gen("param",i.toString());
                }
                    gen("call","_"+id.toString());
                    
                    parser.paramsId.clear();
                    RESULT =new result(id.toString());
              
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= ID ASSIGNATIONS ID PAR_LEFT PAR_RIGHT SEMICOLON 
            {
              result RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).right;
		String asig = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).value;
		
                gen("call",id1.toString());
                String t = temp_nuevo();
                gen(asig,"ret",t);
                gen(asig,t,id.toString());
                RESULT =new result(id.toString());
              
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= tipos ID lista_assig SEMICOLON 
            {
              result RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).right;
		result tipo = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).value;

              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= tipos ID SEMICOLON 
            {
              result RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).right;
		result tipo = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).value;
		
                
               
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= tipos ID ASSIGNATIONS ID PAR_LEFT PAR_RIGHT SEMICOLON 
            {
              result RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-6)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-6)).right;
		result tipo = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).right;
		String asig = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).value;
		
                gen("call",id1.toString());
                String t = temp_nuevo();
                gen("ret",t,"",parser.ambito);
                gen(asig,t,id.toString());
               RESULT =new result(id.toString());
              
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-6)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= tipo_void ID PAR_LEFT lista_parametros PAR_RIGHT BRACK_LEFT NT$6 statements BRACK_RIGHT 
            {
              result RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (result) ((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-8)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-8)).right;
		result tipo = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-7)).value;
		int statleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).left;
		int statright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).right;
		result stat = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).value;
		parser.resetAmbito();
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-8)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$6 ::= 
            {
              result RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)).right;
		result tipo = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).value;
parser.agregarAmbito(id.toString());
                gen("Etiq","_"+id.toString());
               // result mr =(result)m;
               // result statr = (result)stat;
              // completa(statr.backpatch.siguiente,mr.valor.toString());
              // RESULT =new result(new BackPatch(mr.backpatch.siguiente));
              
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("NT$6",28, ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= tipos ID ASSIGNATIONS ID PAR_LEFT lista_parametros2 PAR_RIGHT SEMICOLON 
            {
              result RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-7)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-7)).right;
		result tipo = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-6)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)).right;
		String asig = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).value;
		Collections.reverse(parser.paramsId);
                for(String i: parser.paramsId){
                    gen("param",i.toString());
                }
                    gen("call","_"+id1.toString());
                    String t = temp_nuevo();
                    gen("ret",t,"",parser.ambito);
                    gen(asig,t,id.toString());

                    parser.paramsId.clear();
                   RESULT = new result(id.toString());
              
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-7)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= tipos ID ASSIGNATIONS ID SEMICOLON 
            {
              result RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).right;
		result tipo = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).right;
		String asig = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).value;
		
                String t = temp_nuevo();
                gen(asig,id1.toString(),"",t,parser.ambito);
                gen(asig,t,id.toString());
                RESULT = new result(id.toString());
              
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= tipos ID ASSIGNATIONS literal SEMICOLON 
            {
              result RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).right;
		result tipo = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).right;
		String asig = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).right;
		result lit = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).value;
		result idr = new result(id.toString());
                 result litr = (result)lit;
                 String t = temp_nuevo();
                 gen(asig,litr.valor.toString(),"",t,parser.ambito);
                 gen(asig,t, id.toString());
                // tablaCuad.PrintTablaCuad();
                 System.out.print("\n----------------\n");
                 RESULT = idr;
              
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= tipos ID ASSIGNATIONS literal_String SEMICOLON 
            {
              result RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).right;
		result tipo = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).right;
		String asig = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).right;
		result lit = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).value;
		   result idr = new result(id.toString());
                    result litr = (result)lit;
                    String t = temp_nuevo();
                    gen(asig,litr.valor.toString(),"",t,parser.ambito);
                    gen(asig,t, id.toString());
                    //tablaCuad.PrintTablaCuad();
                    RESULT = idr;
               
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= tipos ID PAR_LEFT PAR_RIGHT BRACK_LEFT NT$5 statements return_value SEMICOLON BRACK_RIGHT 
            {
              result RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (result) ((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-9)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-9)).right;
		result tipo = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-8)).value;
		int statleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).left;
		int statright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).right;
		result stat = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).value;
		int retleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).left;
		int retright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).right;
		result ret = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).value;
		parser.resetAmbito();
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-9)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$5 ::= 
            {
              result RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).right;
		result tipo = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).value;
parser.agregarAmbito(id.toString());
                gen("Etiq","_"+id.toString());
               // result mr =(result)m;
               // result statr = (result)stat;
               // result retr = (result)ret;
               //completa(statr.backpatch.siguiente,mr.valor.toString());
              //RESULT =new result(new BackPatch(retr.backpatch.siguiente));
              
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("NT$5",27, ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= tipos ID PAR_LEFT lista_parametros PAR_RIGHT BRACK_LEFT NT$4 statements return_value SEMICOLON BRACK_RIGHT 
            {
              result RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (result) ((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-10)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-10)).right;
		result tipo = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-10)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-9)).value;
		int statleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).left;
		int statright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).right;
		result stat = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).value;
		int retleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).left;
		int retright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).right;
		result ret = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).value;
		parser.resetAmbito();
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-10)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$4 ::= 
            {
              result RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)).right;
		result tipo = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).value;
parser.agregarAmbito(id.toString());
                gen("Etiq","_"+id.toString());
               // result mr =(result)m;
                //result statr = (result)stat;
                //result retr = (result)ret;
               //completa(statr.backpatch.siguiente,mr.valor.toString());
              // RESULT =new result(new BackPatch(retr.backpatch.siguiente));
              
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("NT$4",26, ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= tipo_void ID PAR_LEFT PAR_RIGHT BRACK_LEFT NT$3 statements BRACK_RIGHT 
            {
              result RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (result) ((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-7)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-7)).right;
		result tipo = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-6)).value;
		int statleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).left;
		int statright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).right;
		result stat = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).value;
		parser.resetAmbito();
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-7)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$3 ::= 
            {
              result RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).right;
		result tipo = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-3)).value;
parser.agregarAmbito(id.toString());
                gen("Etiq","_"+id.toString());
               // result mr =(result)m;
               // result statr = (result)stat;
                //completa(statr.backpatch.siguiente,mr.valor.toString());
                //RESULT = new result(new BackPatch(mr.backpatch.siguiente));
              
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("NT$3",25, ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= WHILE PAR_LEFT asig_or_and PAR_RIGHT BRACK_LEFT NT$2 statements BRACK_RIGHT 
            {
              result RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (result) ((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).value;
		int while2left = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-7)).left;
		int while2right = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-7)).right;
		Object while2 = (Object)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-7)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)).right;
		result as = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)).value;

              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-7)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$2 ::= 
            {
              result RESULT =null;
		int while2left = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).left;
		int while2right = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).right;
		Object while2 = (Object)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).right;
		result as = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).value;
result asr = (result)as;
                String t = etiq_nueva();
                gen("ETIQ",t);
                gen("if ",as.valor.toString(),"GOTO","");
                gen("GOTO","");
                
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("NT$2",24, ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= FOR PAR_LEFT inicial SEMICOLON assignaciones SEMICOLON incremento PAR_RIGHT BRACK_LEFT NT$1 statements BRACK_RIGHT 
            {
              result RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (result) ((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).value;
		int inicialleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-9)).left;
		int inicialright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-9)).right;
		result inicial = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-9)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-7)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-7)).right;
		result as = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-7)).value;
		int incleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)).left;
		int incright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)).right;
		result inc = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)).value;

              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-11)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$1 ::= 
            {
              result RESULT =null;
		int inicialleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-6)).left;
		int inicialright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-6)).right;
		result inicial = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-6)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).right;
		result as = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).value;
		int incleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).left;
		int incright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).right;
		result inc = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).value;
result asr = (result)as;
                String t1 = etiq_nueva();
                gen("ETIQ",t1);
                String t = etiq_nueva();
                 gen("if "+asr.valor.toString(),"GOTO","");
                 gen("GOTO", "");
                 result incr = (result)inc;
                 gen(incr.valor.toString(),"","1");
                 gen("GOTO", t1);
               
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("NT$1",23, ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= IF PAR_LEFT asig_or_and PAR_RIGHT BRACK_LEFT statements BRACK_RIGHT ELSEIF PAR_LEFT asig_or_and PAR_RIGHT BRACK_LEFT statements BRACK_RIGHT elseif_stment ELSE BRACK_LEFT statements BRACK_RIGHT 
            {
              result RESULT =null;
		int ifsleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-18)).left;
		int ifsright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-18)).right;
		Object ifs = (Object)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-18)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-16)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-16)).right;
		result as = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-16)).value;
		result asr = (result)as;
                //result mr = (result)m;
                //result nr = (result)n;
                //gen("if asr.valor.toString() "," GOTO"," ");
                //gen("GOTO"," ");
              
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-18)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= IF PAR_LEFT asig_or_and PAR_RIGHT BRACK_LEFT statements BRACK_RIGHT ELSEIF PAR_LEFT asig_or_and PAR_RIGHT BRACK_LEFT statements BRACK_RIGHT ELSE BRACK_LEFT statements BRACK_RIGHT 
            {
              result RESULT =null;
		int ifsleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-17)).left;
		int ifsright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-17)).right;
		Object ifs = (Object)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-17)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-15)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-15)).right;
		result as = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-15)).value;
		result asr = (result)as;
                //result mr = (result)m;
                //result nr = (result)n;
                //gen("if",asr.valor.toString()," GOTO"," ");
               // gen("GOTO"," ");
              
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-17)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= IF PAR_LEFT asig_or_and PAR_RIGHT BRACK_LEFT statements BRACK_RIGHT ELSEIF PAR_LEFT asig_or_and PAR_RIGHT BRACK_LEFT statements BRACK_RIGHT elseif_stment 
            {
              result RESULT =null;
		int ifsleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-14)).left;
		int ifsright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-14)).right;
		Object ifs = (Object)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-14)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-12)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-12)).right;
		result as = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-12)).value;
		result asr = (result)as;
                //result mr = (result)m;
                //result nr = (result)n;
                //gen("if ",asr.valor.toString()," GOTO"," ");
                //gen("GOTO"," ");
              
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-14)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= IF PAR_LEFT asig_or_and PAR_RIGHT BRACK_LEFT statements BRACK_RIGHT ELSEIF PAR_LEFT asig_or_and PAR_RIGHT BRACK_LEFT statements BRACK_RIGHT 
            {
              result RESULT =null;
		int ifsleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-13)).left;
		int ifsright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-13)).right;
		Object ifs = (Object)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-13)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-11)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-11)).right;
		result as = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-11)).value;
		result asr = (result)as;
                //result mr = (result)m;
                //result nr = (result)n;
                //gen("if ",asr.valor.toString()," GOTO"," ");
                //gen("GOTO"," ");
              
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-13)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= IF PAR_LEFT asig_or_and PAR_RIGHT BRACK_LEFT statements BRACK_RIGHT ELSE BRACK_LEFT statements BRACK_RIGHT 
            {
              result RESULT =null;
		int ifsleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-10)).left;
		int ifsright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-10)).right;
		Object ifs = (Object)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-10)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-8)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-8)).right;
		result as = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-8)).value;
		result asr = (result)as;
                //result mr = (result)m;
                //result nr = (result)n;
                //gen("if ",asr.valor.toString()," GOTO"," ");
                //gen("GOTO"," ");
              
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-10)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= IF PAR_LEFT asig_or_and PAR_RIGHT BRACK_LEFT statements BRACK_RIGHT 
            {
              result RESULT =null;
		int ifsleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-6)).left;
		int ifsright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-6)).right;
		Object ifs = (Object)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-6)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).right;
		result as = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).value;
		int statleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).left;
		int statright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).right;
		result stat = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).value;
		result asr = (result)as;
                //result mr = (result)m;
               // result nr = (result)n;
                //gen("if ",asr.valor.toString()," GOTO"," ");
              //  gen("GOTO"," ");
              
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-6)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= INT MAIN PAR_LEFT PAR_RIGHT BRACK_LEFT NT$0 statements RETURN literal SEMICOLON BRACK_RIGHT 
            {
              result RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (result) ((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-5)).value;
		int linealeft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-10)).left;
		int linearight = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-10)).right;
		Object linea = (Object)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-10)).value;
		int statleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).left;
		int statright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).right;
		result stat = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).right;
		result lit = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-2)).value;
		result litr = (result)lit;
                gen("ret",litr.valor.toString());
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-10)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$0 ::= 
            {
              result RESULT =null;
		int linealeft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).left;
		int linearight = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).right;
		Object linea = (Object)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-4)).value;
gen("Etiq","_main");
                  
                //result mr =(result)m;
                //result statr = (result)stat;
                //result litr = (result)lit;
               // completa(statr.backpatch.siguiente,mr.valor.toString());
               // RESULT = new result(new BackPatch(litr.backpatch.siguiente));
                
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("NT$0",22, ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statements ::= statement 
            {
              result RESULT =null;
		if(tablaCuad.tabla_cuad.size() !=0)
                Interfaz.cuad = tablaCuad;
                System.out.print("------------------------\n");
                 tablaCuad.PrintTablaCuad();
            
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("statements",3, ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statements ::= statement statements 
            {
              result RESULT =null;

              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("statements",3, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // M ::= 
            {
              result RESULT =null;
		String m = etiq_nueva();
        gen("ETIQ", m);
        RESULT = new result(m);
      
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("M",8, ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // N ::= 
            {
              result RESULT =null;
		Lista lista_sig = new Lista(sig_cuad,tablaCuad);
        BackPatch bp= new BackPatch(lista_sig);
        gen("GOTO","");
        RESULT = new result(bp);
        
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("N",7, ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= statements 
            {
              result RESULT =null;

              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("inicio",4, ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          return CUP$intermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).right;
		result start_val = (result)((java_cup.runtime.Symbol) CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)).value;
		RESULT = start_val;
              CUP$intermedio$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$intermedio$stack.elementAt(CUP$intermedio$top-1)), ((java_cup.runtime.Symbol)CUP$intermedio$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$intermedio$parser.done_parsing();
          return CUP$intermedio$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

