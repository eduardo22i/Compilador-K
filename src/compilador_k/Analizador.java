
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Dec 15 13:20:52 CST 2013
//----------------------------------------------------

package compilador_k;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.Collections;
import java.awt.Color;
import semantico.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Dec 15 13:20:52 CST 2013
  */
public class Analizador extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Analizador() {super();}

  /** Constructor which sets the default scanner. */
  public Analizador(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\175\000\002\002\004\000\002\006\003\000\002\005" +
    "\004\000\002\005\003\000\002\026\002\000\002\011\015" +
    "\000\002\011\011\000\002\011\015\000\002\011\020\000" +
    "\002\011\021\000\002\027\002\000\002\011\025\000\002" +
    "\030\002\000\002\011\026\000\002\031\002\000\002\011" +
    "\016\000\002\032\002\000\002\011\012\000\002\033\002" +
    "\000\002\011\012\000\002\034\002\000\002\011\015\000" +
    "\002\035\002\000\002\011\014\000\002\011\007\000\002" +
    "\011\007\000\002\011\007\000\002\011\012\000\002\036" +
    "\002\000\002\011\013\000\002\011\011\000\002\011\005" +
    "\000\002\011\006\000\002\011\010\000\002\011\007\000" +
    "\002\011\011\000\002\011\006\000\002\011\006\000\002" +
    "\011\006\000\002\011\004\000\002\011\004\000\002\011" +
    "\010\000\002\011\007\000\002\011\007\000\002\011\010" +
    "\000\002\023\012\000\002\023\011\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\004\003\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\010\003\000\002\024\003\000\002\024\005" +
    "\000\002\024\005\000\002\017\005\000\002\017\004\000" +
    "\002\017\003\000\002\021\004\000\002\021\005\000\002" +
    "\021\004\000\002\021\005\000\002\021\004\000\002\021" +
    "\005\000\002\021\003\000\002\022\005\000\002\022\006" +
    "\000\002\007\006\000\002\007\006\000\002\007\003\000" +
    "\002\012\004\000\002\012\003\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\010\000\002\013" +
    "\003\000\002\014\006\000\002\014\004\000\002\014\003" +
    "\000\002\015\005\000\002\015\003\000\002\015\005\000" +
    "\002\015\003\000\002\015\005\000\002\015\003\000\002" +
    "\015\003\000\002\020\004\000\002\020\004\000\002\020" +
    "\004\000\002\020\010\000\002\020\006\000\002\020\006" +
    "\000\002\020\006\000\002\020\011\000\002\020\007\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\016\010\000\002\016\010\000\002\016" +
    "\007\000\002\016\007\000\002\016\005\000\002\016\007" +
    "\000\002\016\005\000\002\016\010\000\002\016\003\000" +
    "\002\016\005\000\002\016\003\000\002\016\011\000\002" +
    "\016\007\000\002\016\007\000\002\016\005\000\002\016" +
    "\011\000\002\016\007\000\002\016\014\000\002\016\012" +
    "\000\002\016\014\000\002\016\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u012f\000\042\003\026\004\016\005\031\006\025\007" +
    "\015\017\033\022\012\027\005\030\020\031\022\032\007" +
    "\033\013\035\032\036\006\040\014\041\010\001\002\000" +
    "\050\002\ufffe\003\026\004\016\005\031\006\025\007\015" +
    "\017\033\022\012\025\ufffe\027\005\030\020\031\022\032" +
    "\007\033\013\035\032\036\006\040\014\041\010\046\ufffe" +
    "\001\002\000\006\007\uffce\045\u0127\001\002\000\004\022" +
    "\u0120\001\002\000\004\007\uffcd\001\002\000\004\022\u0117" +
    "\001\002\000\004\007\u010a\001\002\000\012\004\016\005" +
    "\031\006\025\007\373\001\002\000\004\022\322\001\002" +
    "\000\004\022\300\001\002\000\022\010\107\011\105\012" +
    "\104\013\110\015\260\020\uff91\022\257\026\055\001\002" +
    "\000\026\003\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2\020" +
    "\uffd2\021\uffd2\023\uffd2\042\uffd2\043\uffd2\001\002\000\004" +
    "\002\256\001\002\000\004\007\uffcc\001\002\000\004\007" +
    "\164\001\002\000\004\007\uffcb\001\002\000\004\020\163" +
    "\001\002\000\004\020\162\001\002\000\026\003\uffd1\010" +
    "\uffd1\011\uffd1\012\uffd1\013\uffd1\020\uffd1\021\uffd1\023\uffd1" +
    "\042\uffd1\043\uffd1\001\002\000\006\020\uffb6\023\uffb6\001" +
    "\002\000\016\010\107\011\105\012\104\013\110\020\uff8f" +
    "\023\uff8f\001\002\000\004\002\000\001\002\000\026\003" +
    "\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0\020\uffd0\021\uffd0" +
    "\023\uffd0\042\uffd0\043\uffd0\001\002\000\004\022\034\001" +
    "\002\000\004\007\uffca\001\002\000\014\003\035\027\037" +
    "\030\020\031\022\032\007\001\002\000\004\020\uffb8\001" +
    "\002\000\004\007\100\001\002\000\004\007\uffce\001\002" +
    "\000\004\020\041\001\002\000\006\003\043\007\042\001" +
    "\002\000\004\014\056\001\002\000\012\020\uffb1\023\uffb1" +
    "\042\uffb1\043\uffb1\001\002\000\004\020\045\001\002\000" +
    "\006\003\026\007\046\001\002\000\004\026\055\001\002" +
    "\000\004\023\050\001\002\000\004\024\051\001\002\000" +
    "\042\003\ufff3\004\ufff3\005\ufff3\006\ufff3\007\ufff3\017\ufff3" +
    "\022\ufff3\027\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\035" +
    "\ufff3\036\ufff3\040\ufff3\041\ufff3\001\002\000\042\003\026" +
    "\004\016\005\031\006\025\007\015\017\033\022\012\027" +
    "\005\030\020\031\022\032\007\033\013\035\032\036\006" +
    "\040\014\041\010\001\002\000\004\025\054\001\002\000" +
    "\050\002\ufff2\003\ufff2\004\ufff2\005\ufff2\006\ufff2\007\ufff2" +
    "\017\ufff2\022\ufff2\025\ufff2\027\ufff2\030\ufff2\031\ufff2\032" +
    "\ufff2\033\ufff2\035\ufff2\036\ufff2\040\ufff2\041\ufff2\046\ufff2" +
    "\001\002\000\006\020\uffb7\023\uffb7\001\002\000\014\004" +
    "\016\005\031\006\025\007\057\016\061\001\002\000\014" +
    "\020\uffb3\022\063\023\uffb3\042\uffb3\043\uffb3\001\002\000" +
    "\012\020\uffb5\023\uffb5\042\uffb5\043\uffb5\001\002\000\016" +
    "\003\uffcf\020\uffcf\021\uffcf\023\uffcf\042\uffcf\043\uffcf\001" +
    "\002\000\012\020\uffb4\023\uffb4\042\uffb4\043\uffb4\001\002" +
    "\000\016\003\067\004\016\005\031\006\025\007\066\016" +
    "\061\001\002\000\006\021\076\023\uffa8\001\002\000\004" +
    "\023\075\001\002\000\006\021\073\023\uffac\001\002\000" +
    "\004\023\uffa7\001\002\000\006\021\071\023\uffaa\001\002" +
    "\000\016\003\067\004\016\005\031\006\025\007\066\016" +
    "\061\001\002\000\004\023\uffab\001\002\000\016\003\067" +
    "\004\016\005\031\006\025\007\066\016\061\001\002\000" +
    "\004\023\uffad\001\002\000\012\020\uffb2\023\uffb2\042\uffb2" +
    "\043\uffb2\001\002\000\016\003\067\004\016\005\031\006" +
    "\025\007\066\016\061\001\002\000\004\023\uffa9\001\002" +
    "\000\004\015\101\001\002\000\012\004\016\005\031\006" +
    "\025\016\061\001\002\000\004\020\uffba\001\002\000\004" +
    "\020\uffb9\001\002\000\024\004\uff9b\005\uff9b\006\uff9b\007" +
    "\uff9b\022\uff9b\027\uff9b\030\uff9b\031\uff9b\032\uff9b\001\002" +
    "\000\024\004\uff9c\005\uff9c\006\uff9c\007\uff9c\022\uff9c\027" +
    "\uff9c\030\uff9c\031\uff9c\032\uff9c\001\002\000\024\004\016" +
    "\005\031\006\025\007\113\022\012\027\037\030\020\031" +
    "\022\032\007\001\002\000\024\004\uff9d\005\uff9d\006\uff9d" +
    "\007\uff9d\022\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d\001" +
    "\002\000\024\004\uff9a\005\uff9a\006\uff9a\007\uff9a\022\uff9a" +
    "\027\uff9a\030\uff9a\031\uff9a\032\uff9a\001\002\000\006\020" +
    "\uff90\023\uff90\001\002\000\004\007\135\001\002\000\022" +
    "\010\107\011\105\012\104\013\110\015\116\020\uff91\022" +
    "\115\023\uff91\001\002\000\024\004\016\005\031\006\025" +
    "\007\113\022\012\027\037\030\020\031\022\032\007\001" +
    "\002\000\020\003\067\004\016\005\031\006\025\007\066" +
    "\016\061\023\125\001\002\000\012\004\016\005\031\006" +
    "\025\007\117\001\002\000\012\010\107\011\105\012\104" +
    "\013\110\001\002\000\012\010\107\011\105\012\104\013" +
    "\110\001\002\000\024\004\016\005\031\006\025\007\113" +
    "\022\012\027\037\030\020\031\022\032\007\001\002\000" +
    "\006\020\uff96\023\uff96\001\002\000\024\004\016\005\031" +
    "\006\025\007\113\022\012\027\037\030\020\031\022\032" +
    "\007\001\002\000\006\020\uff97\023\uff97\001\002\000\016" +
    "\010\107\011\105\012\104\013\110\020\uff93\023\uff93\001" +
    "\002\000\004\023\127\001\002\000\012\010\107\011\105" +
    "\012\104\013\110\001\002\000\024\004\016\005\031\006" +
    "\025\007\113\022\012\027\037\030\020\031\022\032\007" +
    "\001\002\000\006\020\uff92\023\uff92\001\002\000\024\004" +
    "\016\005\031\006\025\007\113\022\012\027\037\030\020" +
    "\031\022\032\007\001\002\000\006\020\uff94\023\uff94\001" +
    "\002\000\006\020\uff95\023\uff95\001\002\000\004\015\136" +
    "\001\002\000\014\004\016\005\031\006\025\007\137\022" +
    "\141\001\002\000\012\010\107\011\105\012\104\013\110" +
    "\001\002\000\012\010\107\011\105\012\104\013\110\001" +
    "\002\000\012\004\016\005\031\006\025\007\142\001\002" +
    "\000\012\010\107\011\105\012\104\013\110\001\002\000" +
    "\012\010\107\011\105\012\104\013\110\001\002\000\024" +
    "\004\016\005\031\006\025\007\113\022\012\027\037\030" +
    "\020\031\022\032\007\001\002\000\004\023\146\001\002" +
    "\000\016\010\107\011\105\012\104\013\110\020\uff87\023" +
    "\uff87\001\002\000\024\004\016\005\031\006\025\007\113" +
    "\022\012\027\037\030\020\031\022\032\007\001\002\000" +
    "\006\020\uff88\023\uff88\001\002\000\024\004\016\005\031" +
    "\006\025\007\113\022\012\027\037\030\020\031\022\032" +
    "\007\001\002\000\004\023\153\001\002\000\016\010\107" +
    "\011\105\012\104\013\110\020\uff85\023\uff85\001\002\000" +
    "\024\004\016\005\031\006\025\007\113\022\012\027\037" +
    "\030\020\031\022\032\007\001\002\000\006\020\uff86\023" +
    "\uff86\001\002\000\024\004\016\005\031\006\025\007\113" +
    "\022\012\027\037\030\020\031\022\032\007\001\002\000" +
    "\006\020\uff99\023\uff99\001\002\000\024\004\016\005\031" +
    "\006\025\007\113\022\012\027\037\030\020\031\022\032" +
    "\007\001\002\000\006\020\uff98\023\uff98\001\002\000\050" +
    "\002\uffd9\003\uffd9\004\uffd9\005\uffd9\006\uffd9\007\uffd9\017" +
    "\uffd9\022\uffd9\025\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9" +
    "\033\uffd9\035\uffd9\036\uffd9\040\uffd9\041\uffd9\046\uffd9\001" +
    "\002\000\050\002\uffda\003\uffda\004\uffda\005\uffda\006\uffda" +
    "\007\uffda\017\uffda\022\uffda\025\uffda\027\uffda\030\uffda\031" +
    "\uffda\032\uffda\033\uffda\035\uffda\036\uffda\040\uffda\041\uffda" +
    "\046\uffda\001\002\000\014\003\170\015\172\020\167\021" +
    "\165\022\171\001\002\000\004\007\254\001\002\000\004" +
    "\020\253\001\002\000\050\002\uffe2\003\uffe2\004\uffe2\005" +
    "\uffe2\006\uffe2\007\uffe2\017\uffe2\022\uffe2\025\uffe2\027\uffe2" +
    "\030\uffe2\031\uffe2\032\uffe2\033\uffe2\035\uffe2\036\uffe2\040" +
    "\uffe2\041\uffe2\046\uffe2\001\002\000\004\020\uffc4\001\002" +
    "\000\016\003\207\023\212\027\037\030\020\031\022\032" +
    "\007\001\002\000\016\004\016\005\031\006\025\007\173" +
    "\016\061\022\141\001\002\000\016\010\107\011\105\012" +
    "\104\013\110\020\200\022\201\001\002\000\014\010\107" +
    "\011\105\012\104\013\110\020\177\001\002\000\004\020" +
    "\176\001\002\000\050\002\uffe9\003\uffe9\004\uffe9\005\uffe9" +
    "\006\uffe9\007\uffe9\017\uffe9\022\uffe9\025\uffe9\027\uffe9\030" +
    "\uffe9\031\uffe9\032\uffe9\033\uffe9\035\uffe9\036\uffe9\040\uffe9" +
    "\041\uffe9\046\uffe9\001\002\000\050\002\uffe8\003\uffe8\004" +
    "\uffe8\005\uffe8\006\uffe8\007\uffe8\017\uffe8\022\uffe8\025\uffe8" +
    "\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\035\uffe8\036" +
    "\uffe8\040\uffe8\041\uffe8\046\uffe8\001\002\000\050\002\uffe7" +
    "\003\uffe7\004\uffe7\005\uffe7\006\uffe7\007\uffe7\017\uffe7\022" +
    "\uffe7\025\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7" +
    "\035\uffe7\036\uffe7\040\uffe7\041\uffe7\046\uffe7\001\002\000" +
    "\020\003\067\004\016\005\031\006\025\007\066\016\061" +
    "\023\202\001\002\000\004\020\206\001\002\000\004\023" +
    "\204\001\002\000\004\020\205\001\002\000\050\002\uffe6" +
    "\003\uffe6\004\uffe6\005\uffe6\006\uffe6\007\uffe6\017\uffe6\022" +
    "\uffe6\025\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6" +
    "\035\uffe6\036\uffe6\040\uffe6\041\uffe6\046\uffe6\001\002\000" +
    "\050\002\uffe3\003\uffe3\004\uffe3\005\uffe3\006\uffe3\007\uffe3" +
    "\017\uffe3\022\uffe3\025\uffe3\027\uffe3\030\uffe3\031\uffe3\032" +
    "\uffe3\033\uffe3\035\uffe3\036\uffe3\040\uffe3\041\uffe3\046\uffe3" +
    "\001\002\000\004\023\uffae\001\002\000\004\023\244\001" +
    "\002\000\004\007\241\001\002\000\004\024\213\001\002" +
    "\000\042\003\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb\017" +
    "\uffeb\022\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb" +
    "\035\uffeb\036\uffeb\040\uffeb\041\uffeb\001\002\000\042\003" +
    "\026\004\016\005\031\006\025\007\015\017\033\022\012" +
    "\027\005\030\020\031\022\032\007\033\013\035\032\036" +
    "\006\040\014\041\010\001\002\000\004\046\217\001\002" +
    "\000\004\020\237\001\002\000\014\004\016\005\031\006" +
    "\025\007\220\016\061\001\002\000\016\010\107\011\105" +
    "\012\104\013\110\020\uffa4\022\226\001\002\000\014\010" +
    "\107\011\105\012\104\013\110\020\uffa5\001\002\000\004" +
    "\020\uffa6\001\002\000\024\004\016\005\031\006\025\007" +
    "\113\022\012\027\037\030\020\031\022\032\007\001\002" +
    "\000\004\020\uffa1\001\002\000\024\004\016\005\031\006" +
    "\025\007\113\022\012\027\037\030\020\031\022\032\007" +
    "\001\002\000\020\003\067\004\016\005\031\006\025\007" +
    "\066\016\061\023\227\001\002\000\014\010\107\011\105" +
    "\012\104\013\110\020\uffa0\001\002\000\004\023\231\001" +
    "\002\000\014\010\107\011\105\012\104\013\110\020\uff9e" +
    "\001\002\000\024\004\016\005\031\006\025\007\113\022" +
    "\012\027\037\030\020\031\022\032\007\001\002\000\004" +
    "\020\uff9f\001\002\000\024\004\016\005\031\006\025\007" +
    "\113\022\012\027\037\030\020\031\022\032\007\001\002" +
    "\000\004\020\uffa3\001\002\000\004\020\uffa2\001\002\000" +
    "\004\025\240\001\002\000\050\002\uffea\003\uffea\004\uffea" +
    "\005\uffea\006\uffea\007\uffea\017\uffea\022\uffea\025\uffea\027" +
    "\uffea\030\uffea\031\uffea\032\uffea\033\uffea\035\uffea\036\uffea" +
    "\040\uffea\041\uffea\046\uffea\001\002\000\006\021\242\023" +
    "\uffaf\001\002\000\014\003\207\027\037\030\020\031\022" +
    "\032\007\001\002\000\004\023\uffb0\001\002\000\004\024" +
    "\245\001\002\000\042\003\uffed\004\uffed\005\uffed\006\uffed" +
    "\007\uffed\017\uffed\022\uffed\027\uffed\030\uffed\031\uffed\032" +
    "\uffed\033\uffed\035\uffed\036\uffed\040\uffed\041\uffed\001\002" +
    "\000\042\003\026\004\016\005\031\006\025\007\015\017" +
    "\033\022\012\027\005\030\020\031\022\032\007\033\013" +
    "\035\032\036\006\040\014\041\010\001\002\000\004\046" +
    "\217\001\002\000\004\020\251\001\002\000\004\025\252" +
    "\001\002\000\050\002\uffec\003\uffec\004\uffec\005\uffec\006" +
    "\uffec\007\uffec\017\uffec\022\uffec\025\uffec\027\uffec\030\uffec" +
    "\031\uffec\032\uffec\033\uffec\035\uffec\036\uffec\040\uffec\041" +
    "\uffec\046\uffec\001\002\000\050\002\uffe1\003\uffe1\004\uffe1" +
    "\005\uffe1\006\uffe1\007\uffe1\017\uffe1\022\uffe1\025\uffe1\027" +
    "\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\035\uffe1\036\uffe1" +
    "\040\uffe1\041\uffe1\046\uffe1\001\002\000\010\003\170\020" +
    "\uffc5\021\165\001\002\000\004\020\uffc6\001\002\000\004" +
    "\002\001\001\002\000\020\003\067\004\016\005\031\006" +
    "\025\007\066\016\061\023\125\001\002\000\014\004\016" +
    "\005\031\006\025\007\261\016\061\001\002\000\016\010" +
    "\107\011\105\012\104\013\110\020\266\022\267\001\002" +
    "\000\014\010\107\011\105\012\104\013\110\020\265\001" +
    "\002\000\004\020\264\001\002\000\050\002\uffdc\003\uffdc" +
    "\004\uffdc\005\uffdc\006\uffdc\007\uffdc\017\uffdc\022\uffdc\025" +
    "\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\035\uffdc" +
    "\036\uffdc\040\uffdc\041\uffdc\046\uffdc\001\002\000\050\002" +
    "\uffdb\003\uffdb\004\uffdb\005\uffdb\006\uffdb\007\uffdb\017\uffdb" +
    "\022\uffdb\025\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033" +
    "\uffdb\035\uffdb\036\uffdb\040\uffdb\041\uffdb\046\uffdb\001\002" +
    "\000\050\002\uffdd\003\uffdd\004\uffdd\005\uffdd\006\uffdd\007" +
    "\uffdd\017\uffdd\022\uffdd\025\uffdd\027\uffdd\030\uffdd\031\uffdd" +
    "\032\uffdd\033\uffdd\035\uffdd\036\uffdd\040\uffdd\041\uffdd\046" +
    "\uffdd\001\002\000\020\003\067\004\016\005\031\006\025" +
    "\007\066\016\061\023\270\001\002\000\004\020\274\001" +
    "\002\000\004\023\272\001\002\000\004\020\273\001\002" +
    "\000\050\002\uffde\003\uffde\004\uffde\005\uffde\006\uffde\007" +
    "\uffde\017\uffde\022\uffde\025\uffde\027\uffde\030\uffde\031\uffde" +
    "\032\uffde\033\uffde\035\uffde\036\uffde\040\uffde\041\uffde\046" +
    "\uffde\001\002\000\050\002\uffe0\003\uffe0\004\uffe0\005\uffe0" +
    "\006\uffe0\007\uffe0\017\uffe0\022\uffe0\025\uffe0\027\uffe0\030" +
    "\uffe0\031\uffe0\032\uffe0\033\uffe0\035\uffe0\036\uffe0\040\uffe0" +
    "\041\uffe0\046\uffe0\001\002\000\004\023\276\001\002\000" +
    "\014\010\107\011\105\012\104\013\110\020\277\001\002" +
    "\000\050\002\uffdf\003\uffdf\004\uffdf\005\uffdf\006\uffdf\007" +
    "\uffdf\017\uffdf\022\uffdf\025\uffdf\027\uffdf\030\uffdf\031\uffdf" +
    "\032\uffdf\033\uffdf\035\uffdf\036\uffdf\040\uffdf\041\uffdf\046" +
    "\uffdf\001\002\000\006\007\301\016\061\001\002\000\004" +
    "\023\320\001\002\000\010\003\305\021\303\023\306\001" +
    "\002\000\014\004\016\005\031\006\025\007\312\016\061" +
    "\001\002\000\004\023\310\001\002\000\004\023\uffbd\001" +
    "\002\000\004\020\307\001\002\000\050\002\uffd7\003\uffd7" +
    "\004\uffd7\005\uffd7\006\uffd7\007\uffd7\017\uffd7\022\uffd7\025" +
    "\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\035\uffd7" +
    "\036\uffd7\040\uffd7\041\uffd7\046\uffd7\001\002\000\004\020" +
    "\311\001\002\000\050\002\uffd8\003\uffd8\004\uffd8\005\uffd8" +
    "\006\uffd8\007\uffd8\017\uffd8\022\uffd8\025\uffd8\027\uffd8\030" +
    "\uffd8\031\uffd8\032\uffd8\033\uffd8\035\uffd8\036\uffd8\040\uffd8" +
    "\041\uffd8\046\uffd8\001\002\000\010\003\305\021\303\023" +
    "\uffc3\001\002\000\010\003\305\021\303\023\uffc1\001\002" +
    "\000\010\003\305\021\303\023\uffbf\001\002\000\004\023" +
    "\uffbe\001\002\000\004\023\uffc0\001\002\000\004\023\uffc2" +
    "\001\002\000\004\020\321\001\002\000\050\002\uffd6\003" +
    "\uffd6\004\uffd6\005\uffd6\006\uffd6\007\uffd6\017\uffd6\022\uffd6" +
    "\025\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\035" +
    "\uffd6\036\uffd6\040\uffd6\041\uffd6\046\uffd6\001\002\000\006" +
    "\003\043\007\042\001\002\000\004\023\331\001\002\000" +
    "\010\023\uffc9\042\326\043\325\001\002\000\006\003\043" +
    "\007\042\001\002\000\006\003\043\007\042\001\002\000" +
    "\004\023\uffc8\001\002\000\004\023\uffc7\001\002\000\004" +
    "\024\332\001\002\000\042\003\026\004\016\005\031\006" +
    "\025\007\015\017\033\022\012\027\005\030\020\031\022" +
    "\032\007\033\013\035\032\036\006\040\014\041\010\001" +
    "\002\000\004\025\334\001\002\000\054\002\ufffb\003\ufffb" +
    "\004\ufffb\005\ufffb\006\ufffb\007\ufffb\017\ufffb\022\ufffb\025" +
    "\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb\033\ufffb\034\335" +
    "\035\ufffb\036\ufffb\037\336\040\ufffb\041\ufffb\046\ufffb\001" +
    "\002\000\004\024\370\001\002\000\004\022\337\001\002" +
    "\000\006\003\043\007\042\001\002\000\004\023\341\001" +
    "\002\000\004\024\342\001\002\000\042\003\026\004\016" +
    "\005\031\006\025\007\015\017\033\022\012\027\005\030" +
    "\020\031\022\032\007\033\013\035\032\036\006\040\014" +
    "\041\010\001\002\000\004\025\344\001\002\000\054\002" +
    "\ufff9\003\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9\017\ufff9" +
    "\022\ufff9\025\ufff9\027\ufff9\030\ufff9\031\ufff9\032\ufff9\033" +
    "\ufff9\034\345\035\ufff9\036\ufff9\037\346\040\ufff9\041\ufff9" +
    "\046\ufff9\001\002\000\004\024\364\001\002\000\004\022" +
    "\355\001\002\000\052\002\ufff8\003\ufff8\004\ufff8\005\ufff8" +
    "\006\ufff8\007\ufff8\017\ufff8\022\ufff8\025\ufff8\027\ufff8\030" +
    "\ufff8\031\ufff8\032\ufff8\033\ufff8\034\350\035\ufff8\036\ufff8" +
    "\040\ufff8\041\ufff8\046\ufff8\001\002\000\004\024\351\001" +
    "\002\000\042\003\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5" +
    "\017\ufff5\022\ufff5\027\ufff5\030\ufff5\031\ufff5\032\ufff5\033" +
    "\ufff5\035\ufff5\036\ufff5\040\ufff5\041\ufff5\001\002\000\042" +
    "\003\026\004\016\005\031\006\025\007\015\017\033\022" +
    "\012\027\005\030\020\031\022\032\007\033\013\035\032" +
    "\036\006\040\014\041\010\001\002\000\004\025\354\001" +
    "\002\000\050\002\ufff4\003\ufff4\004\ufff4\005\ufff4\006\ufff4" +
    "\007\ufff4\017\ufff4\022\ufff4\025\ufff4\027\ufff4\030\ufff4\031" +
    "\ufff4\032\ufff4\033\ufff4\035\ufff4\036\ufff4\040\ufff4\041\ufff4" +
    "\046\ufff4\001\002\000\006\003\043\007\042\001\002\000" +
    "\004\023\357\001\002\000\004\024\360\001\002\000\042" +
    "\003\026\004\016\005\031\006\025\007\015\017\033\022" +
    "\012\027\005\030\020\031\022\032\007\033\013\035\032" +
    "\036\006\040\014\041\010\001\002\000\004\025\362\001" +
    "\002\000\054\002\uffd3\003\uffd3\004\uffd3\005\uffd3\006\uffd3" +
    "\007\uffd3\017\uffd3\022\uffd3\025\uffd3\027\uffd3\030\uffd3\031" +
    "\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\346" +
    "\040\uffd3\041\uffd3\046\uffd3\001\002\000\052\002\uffd4\003" +
    "\uffd4\004\uffd4\005\uffd4\006\uffd4\007\uffd4\017\uffd4\022\uffd4" +
    "\025\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034" +
    "\uffd4\035\uffd4\036\uffd4\040\uffd4\041\uffd4\046\uffd4\001\002" +
    "\000\042\003\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7\017" +
    "\ufff7\022\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7" +
    "\035\ufff7\036\ufff7\040\ufff7\041\ufff7\001\002\000\042\003" +
    "\026\004\016\005\031\006\025\007\015\017\033\022\012" +
    "\027\005\030\020\031\022\032\007\033\013\035\032\036" +
    "\006\040\014\041\010\001\002\000\004\025\367\001\002" +
    "\000\050\002\ufff6\003\ufff6\004\ufff6\005\ufff6\006\ufff6\007" +
    "\ufff6\017\ufff6\022\ufff6\025\ufff6\027\ufff6\030\ufff6\031\ufff6" +
    "\032\ufff6\033\ufff6\035\ufff6\036\ufff6\040\ufff6\041\ufff6\046" +
    "\ufff6\001\002\000\042\003\026\004\016\005\031\006\025" +
    "\007\015\017\033\022\012\027\005\030\020\031\022\032" +
    "\007\033\013\035\032\036\006\040\014\041\010\001\002" +
    "\000\004\025\372\001\002\000\050\002\ufffa\003\ufffa\004" +
    "\ufffa\005\ufffa\006\ufffa\007\ufffa\017\ufffa\022\ufffa\025\ufffa" +
    "\027\ufffa\030\ufffa\031\ufffa\032\ufffa\033\ufffa\035\ufffa\036" +
    "\ufffa\040\ufffa\041\ufffa\046\ufffa\001\002\000\012\010\107" +
    "\011\105\012\104\013\110\001\002\000\014\010\107\011" +
    "\105\012\104\013\110\023\376\001\002\000\024\004\016" +
    "\005\031\006\025\007\113\022\012\027\037\030\020\031" +
    "\022\032\007\001\002\000\016\010\107\011\105\012\104" +
    "\013\110\020\uff8b\023\uff8b\001\002\000\024\004\016\005" +
    "\031\006\025\007\113\022\012\027\037\030\020\031\022" +
    "\032\007\001\002\000\006\020\uff8c\023\uff8c\001\002\000" +
    "\004\023\u0102\001\002\000\016\010\107\011\105\012\104" +
    "\013\110\020\uff8d\023\uff8d\001\002\000\024\004\016\005" +
    "\031\006\025\007\113\022\012\027\037\030\020\031\022" +
    "\032\007\001\002\000\006\020\uff8e\023\uff8e\001\002\000" +
    "\024\004\016\005\031\006\025\007\113\022\012\027\037" +
    "\030\020\031\022\032\007\001\002\000\004\023\u0107\001" +
    "\002\000\016\010\107\011\105\012\104\013\110\020\uff89" +
    "\023\uff89\001\002\000\024\004\016\005\031\006\025\007" +
    "\113\022\012\027\037\030\020\031\022\032\007\001\002" +
    "\000\006\020\uff8a\023\uff8a\001\002\000\004\022\u010b\001" +
    "\002\000\016\003\207\023\u010d\027\037\030\020\031\022" +
    "\032\007\001\002\000\004\023\u0112\001\002\000\004\024" +
    "\u010e\001\002\000\042\003\uffef\004\uffef\005\uffef\006\uffef" +
    "\007\uffef\017\uffef\022\uffef\027\uffef\030\uffef\031\uffef\032" +
    "\uffef\033\uffef\035\uffef\036\uffef\040\uffef\041\uffef\001\002" +
    "\000\042\003\026\004\016\005\031\006\025\007\015\017" +
    "\033\022\012\027\005\030\020\031\022\032\007\033\013" +
    "\035\032\036\006\040\014\041\010\001\002\000\004\025" +
    "\u0111\001\002\000\050\002\uffee\003\uffee\004\uffee\005\uffee" +
    "\006\uffee\007\uffee\017\uffee\022\uffee\025\uffee\027\uffee\030" +
    "\uffee\031\uffee\032\uffee\033\uffee\035\uffee\036\uffee\040\uffee" +
    "\041\uffee\046\uffee\001\002\000\004\024\u0113\001\002\000" +
    "\042\003\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5\017\uffe5" +
    "\022\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\035" +
    "\uffe5\036\uffe5\040\uffe5\041\uffe5\001\002\000\042\003\026" +
    "\004\016\005\031\006\025\007\015\017\033\022\012\027" +
    "\005\030\020\031\022\032\007\033\013\035\032\036\006" +
    "\040\014\041\010\001\002\000\004\025\u0116\001\002\000" +
    "\050\002\uffe4\003\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4" +
    "\017\uffe4\022\uffe4\025\uffe4\027\uffe4\030\uffe4\031\uffe4\032" +
    "\uffe4\033\uffe4\035\uffe4\036\uffe4\040\uffe4\041\uffe4\046\uffe4" +
    "\001\002\000\004\016\061\001\002\000\004\021\u0119\001" +
    "\002\000\004\044\u011d\001\002\000\004\023\u011b\001\002" +
    "\000\004\020\u011c\001\002\000\050\002\uffd5\003\uffd5\004" +
    "\uffd5\005\uffd5\006\uffd5\007\uffd5\017\uffd5\022\uffd5\025\uffd5" +
    "\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\035\uffd5\036" +
    "\uffd5\040\uffd5\041\uffd5\046\uffd5\001\002\000\004\007\u011e" +
    "\001\002\000\006\021\u0119\023\uffbc\001\002\000\004\023" +
    "\uffbb\001\002\000\006\003\043\007\042\001\002\000\004" +
    "\023\u0122\001\002\000\004\024\u0123\001\002\000\042\003" +
    "\ufff1\004\ufff1\005\ufff1\006\ufff1\007\ufff1\017\ufff1\022\ufff1" +
    "\027\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1\035\ufff1\036" +
    "\ufff1\040\ufff1\041\ufff1\001\002\000\042\003\026\004\016" +
    "\005\031\006\025\007\015\017\033\022\012\027\005\030" +
    "\020\031\022\032\007\033\013\035\032\036\006\040\014" +
    "\041\010\001\002\000\004\025\u0126\001\002\000\050\002" +
    "\ufff0\003\ufff0\004\ufff0\005\ufff0\006\ufff0\007\ufff0\017\ufff0" +
    "\022\ufff0\025\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0\033" +
    "\ufff0\035\ufff0\036\ufff0\040\ufff0\041\ufff0\046\ufff0\001\002" +
    "\000\004\022\u0128\001\002\000\004\023\u0129\001\002\000" +
    "\004\024\u012a\001\002\000\042\003\ufffd\004\ufffd\005\ufffd" +
    "\006\ufffd\007\ufffd\017\ufffd\022\ufffd\027\ufffd\030\ufffd\031" +
    "\ufffd\032\ufffd\033\ufffd\035\ufffd\036\ufffd\040\ufffd\041\ufffd" +
    "\001\002\000\042\003\026\004\016\005\031\006\025\007" +
    "\015\017\033\022\012\027\005\030\020\031\022\032\007" +
    "\033\013\035\032\036\006\040\014\041\010\001\002\000" +
    "\004\046\u012d\001\002\000\010\004\016\005\031\006\025" +
    "\001\002\000\004\020\u012f\001\002\000\004\025\u0130\001" +
    "\002\000\050\002\ufffc\003\ufffc\004\ufffc\005\ufffc\006\ufffc" +
    "\007\ufffc\017\ufffc\022\ufffc\025\ufffc\027\ufffc\030\ufffc\031" +
    "\ufffc\032\ufffc\033\ufffc\035\ufffc\036\ufffc\040\ufffc\041\ufffc" +
    "\046\ufffc\001\002\000\010\002\uffff\025\uffff\046\uffff\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u012f\000\022\002\020\003\026\005\027\006\016\010" +
    "\010\011\003\012\022\016\023\001\001\000\020\002\020" +
    "\003\026\005\u0130\010\010\011\003\012\022\016\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\373\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\002\035\007" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\051\001\001\000\020\002\020" +
    "\003\026\005\052\010\010\011\003\012\022\016\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\057\004\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\003\067\004\063\015\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\003\067\004\063\015\071\001\001\000" +
    "\002\001\001\000\010\003\067\004\063\015\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\067\004" +
    "\063\015\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\101\004\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\002\111\003\026\016\110\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\113\001\001\000\010\002\111\003\026\016\133\001" +
    "\001\000\010\003\067\004\063\015\125\001\001\000\004" +
    "\003\117\001\001\000\004\025\122\001\001\000\004\025" +
    "\120\001\001\000\010\002\111\003\026\016\121\001\001" +
    "\000\002\001\001\000\010\002\111\003\026\016\123\001" +
    "\001\000\002\001\001\000\004\025\131\001\001\000\002" +
    "\001\001\000\004\025\127\001\001\000\010\002\111\003" +
    "\026\016\130\001\001\000\002\001\001\000\010\002\111" +
    "\003\026\016\132\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\137\001\001\000\004" +
    "\025\157\001\001\000\004\025\155\001\001\000\004\003" +
    "\142\001\001\000\004\025\150\001\001\000\004\025\143" +
    "\001\001\000\010\002\111\003\026\016\144\001\001\000" +
    "\002\001\001\000\004\025\146\001\001\000\010\002\111" +
    "\003\026\016\147\001\001\000\002\001\001\000\010\002" +
    "\111\003\026\016\151\001\001\000\002\001\001\000\004" +
    "\025\153\001\001\000\010\002\111\003\026\016\154\001" +
    "\001\000\002\001\001\000\010\002\111\003\026\016\156" +
    "\001\001\000\002\001\001\000\010\002\111\003\026\016" +
    "\160\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\165\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\002\210\014\207\001\001\000\006\003\173\004\174\001" +
    "\001\000\004\025\157\001\001\000\004\025\155\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\067\004\063\015\202\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\213\001\001\000\020\002\020\003\026\005\214\010\010" +
    "\011\003\012\022\016\023\001\001\000\004\020\215\001" +
    "\001\000\002\001\001\000\006\003\220\004\221\001\001" +
    "\000\004\025\224\001\001\000\004\025\222\001\001\000" +
    "\002\001\001\000\010\002\111\003\026\016\223\001\001" +
    "\000\002\001\001\000\010\002\111\003\026\016\235\001" +
    "\001\000\010\003\067\004\063\015\227\001\001\000\004" +
    "\025\233\001\001\000\002\001\001\000\004\025\231\001" +
    "\001\000\010\002\111\003\026\016\232\001\001\000\002" +
    "\001\001\000\010\002\111\003\026\016\234\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\002\210\014\242\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\034\245" +
    "\001\001\000\020\002\020\003\026\005\246\010\010\011" +
    "\003\012\022\016\023\001\001\000\004\020\247\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\254\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\067\004\063\015\274\001" +
    "\001\000\006\003\261\004\262\001\001\000\004\025\122" +
    "\001\001\000\004\025\120\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\003\067\004\063\015\270\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\127\001\001\000" +
    "\002\001\001\000\004\004\301\001\001\000\002\001\001" +
    "\000\004\021\303\001\001\000\006\003\312\004\313\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\316\001\001\000\004\021\315\001\001\000\004" +
    "\021\314\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\013\323\024\322\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\013\323\024\327\001\001\000\006\013\323" +
    "\024\326\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\002\020\003\026\005\332\010\010" +
    "\011\003\012\022\016\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\013\323\024\337\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\002\020\003\026\005\342\010\010\011\003" +
    "\012\022\016\023\001\001\000\002\001\001\000\004\023" +
    "\346\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\351\001\001\000" +
    "\020\002\020\003\026\005\352\010\010\011\003\012\022" +
    "\016\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\323\024\355\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\002\020\003\026\005\360\010\010\011" +
    "\003\012\022\016\023\001\001\000\002\001\001\000\004" +
    "\023\362\001\001\000\002\001\001\000\004\027\364\001" +
    "\001\000\020\002\020\003\026\005\365\010\010\011\003" +
    "\012\022\016\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\002\020\003\026\005\370\010\010\011\003" +
    "\012\022\016\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\u0104\001\001\000\004\025\374\001\001" +
    "\000\010\002\111\003\026\016\u0100\001\001\000\004\025" +
    "\376\001\001\000\010\002\111\003\026\016\377\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\u0102\001" +
    "\001\000\010\002\111\003\026\016\u0103\001\001\000\002" +
    "\001\001\000\010\002\111\003\026\016\u0105\001\001\000" +
    "\002\001\001\000\004\025\u0107\001\001\000\010\002\111" +
    "\003\026\016\u0108\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\002\210\014\u010b\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\033\u010e\001\001\000\020\002" +
    "\020\003\026\005\u010f\010\010\011\003\012\022\016\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\036\u0113\001\001\000\020\002\020\003\026" +
    "\005\u0114\010\010\011\003\012\022\016\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\u0117\001\001" +
    "\000\004\022\u0119\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\u011e\001\001\000\002\001\001\000\006\013" +
    "\323\024\u0120\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\032\u0123\001\001\000\020\002\020\003\026\005" +
    "\u0124\010\010\011\003\012\022\016\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\u012a\001\001\000\020" +
    "\002\020\003\026\005\u012b\010\010\011\003\012\022\016" +
    "\023\001\001\000\002\001\001\000\004\003\u012d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



public ArrayList<lineaTabla> funciones = new ArrayList<lineaTabla>();
public ArrayList<String> erroresSemanticos  =new ArrayList<String>();
public ArrayList<String> lista = new ArrayList<String>();
public ArrayList<String> paramsId = new ArrayList<String>();
public ArrayList<type> parametros = new ArrayList<type>();
public ArrayList<id_params> id_par = new ArrayList<id_params>();
public ArrayList<String> tipitos = new ArrayList<String>();
public int control =0;
public String ambito = "inicio";
public String ambito_inicial = ambito;
public String tipito = "";
public tablaSimbolos tablaSim = new tablaSimbolos();
public String expression ="";
public int contador =0;

public String genNombre(){
    return ""+contador++;
}

public void agregarAmbito(String ambi){
    ambito = ambito + "." +ambi;
}
public String resetAmbito(){
    String ambito_nuevo = ambito.substring(ambito.lastIndexOf("."));
    ambito = ambito.substring(0,ambito.lastIndexOf("."));
    return ambito_nuevo;
}
public void syntax_error(Symbol token){
    //System.out.println("error en el token "+ token.value + " En la linea: "+ token.left+1+ " en la columna: "+token.right+1);
    Interfaz.salida.setForeground(Color.RED);
    Interfaz.salida.setText(Interfaz.salida.getText()+"Error sintactico en: '"+ token.value + "' En la linea: "+ (token.left+1) + " en la columna: "+(token.right+1) +"\n");  
    Interfaz.error = 1;
}
public void unrecovered_syntax_error(Symbol token){

}



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Analizador$actions {
  private final Analizador parser;

  /** Constructor */
  CUP$Analizador$actions(Analizador parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Analizador$do_action(
    int                        CUP$Analizador$act_num,
    java_cup.runtime.lr_parser CUP$Analizador$parser,
    java.util.Stack            CUP$Analizador$stack,
    int                        CUP$Analizador$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador$result;

      /* select the action based on the action number */
      switch (CUP$Analizador$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // op_aritmeticas ::= tipos ID ASSIGNATIONS PAR_LEFT ID operaciones op_aritmeticas PAR_RIGHT 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).right;
		String asig = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int op_aleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int op_aright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Object op_a = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int prright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		if(!parser.ambito.equals("inicio")){
                    if(parser.tablaSim.existeEnTabla(id.toString(),parser.ambito)){
                        Interfaz.error =1;
                        Interfaz.salida.setText(Interfaz.salida.getText()+"La variable "+id +" ya fue declarada.Error En la linea: "+(idleft+1)+" en la columna: "+(idright+1)+"\n");
                    }else if(!parser.tablaSim.existeEnTabla(id1.toString(),parser.ambito)){
                        Interfaz.error=1;
                        Interfaz.salida.setText(Interfaz.salida.getText()+"No se ha declarado la variable: "+id.toString()+" Error En la linea: " +(idleft+1) + " en la columna: "+(idright+1)+"\n");
                     }else{
                        if(parser.tablaSim.existeEnTabla(id.toString(),parser.ambito)&&parser.tablaSim.existeEnTabla(id1.toString(),parser.ambito)){
                            String temp = parser.tablaSim.getlinea(id1.toString(),parser.ambito).getValor();
                            parser.tablaSim.agregar(id.toString(),(type)tipo,parser.ambito,"");
                            parser.tablaSim.getlinea(id.toString(),parser.ambito).setValor(temp);
                            System.out.print("\ntemp="+  temp);
                            RESULT =temp;
                        }
                        }
                     }else{
                        Interfaz.error=1;
                        Interfaz.salida.setText(Interfaz.salida.getText()+"No pertenece a ninguna funcion, debe estar adentro de una funcion. Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n");
                    }
                  
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",12, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // op_aritmeticas ::= tipos ID ASSIGNATIONS PAR_LEFT ID operaciones op_aritmeticas PAR_RIGHT operaciones op_aritmeticas 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-9)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-9)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-8)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)).right;
		String asig = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;
		int op_aleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int op_aright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		Object op_a = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int op_a2left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int op_a2right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object op_a2 = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		if(!parser.ambito.equals("inicio")){
                    if(parser.tablaSim.existeEnTabla(id.toString(),parser.ambito)){
                        Interfaz.error =1;
                        Interfaz.salida.setText(Interfaz.salida.getText()+"La variable "+id +" ya fue declarada.Error En la linea: "+(idleft+1)+" en la columna: "+(idright+1)+"\n");
                    }else if(!parser.tablaSim.existeEnTabla(id1.toString(),parser.ambito)){
                        Interfaz.error=1;
                        Interfaz.salida.setText(Interfaz.salida.getText()+"No se ha declarado la variable: "+id.toString()+" Error En la linea: " +(idleft+1) + " en la columna: "+(idright+1)+"\n");
                   }else{ 
                        if(parser.tablaSim.existeEnTabla(id.toString(),parser.ambito)&&parser.tablaSim.existeEnTabla(id1.toString(),parser.ambito)){
                            String temp = parser.tablaSim.getlinea(id1.toString(),parser.ambito).getValor();
                            parser.tablaSim.agregar(id.toString(),(type)tipo,parser.ambito,"");
                            parser.tablaSim.getlinea(id.toString(),parser.ambito).setValor(temp);
                            System.out.print("\ntemp="+  temp);
                            RESULT =temp;
                        }
                        }
                        }else{
                        Interfaz.error=1;
                        Interfaz.salida.setText(Interfaz.salida.getText()+"No pertenece a ninguna funcion, debe estar adentro de una funcion. Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n");
                    }
                 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",12, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-9)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // op_aritmeticas ::= tipos ID ASSIGNATIONS PAR_LEFT literal operaciones op_aritmeticas PAR_RIGHT 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).right;
		String asig = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int op_aleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int op_aright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Object op_a = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int prright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		if(!parser.ambito.equals("inicio")){
                    String[] arreglo = (String[])lit; 
                    if(arreglo[1] == "integer" || arreglo[1] == "float"){
                    if(parser.tablaSim.existeEnTabla(id.toString(),parser.ambito)){
                        Interfaz.error =1;
                        Interfaz.salida.setText(Interfaz.salida.getText()+"La variable "+id +" ya fue declarada. Error En la linea: "+(idleft+1)+" en la columna: "+(idright+1)+"\n");
                    }
                     else{
                        String temp = pl + arreglo[0] + op + op_a +pr;
                        parser.tablaSim.agregar(id.toString(),(type)tipo,parser.ambito,"");
                        parser.tablaSim.getlinea(id.toString(),parser.ambito).setValor(temp);
                        System.out.print("\ntemp="+  temp);
                        RESULT =temp;
                     }
                        RESULT = "0";
                    }else{
                        Interfaz.error=1;
                        Interfaz.salida.setText(Interfaz.salida.getText()+"No se puede hacer la operacion con variable de tipo: "+arreglo[1]+". Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n");
                    
                    }
                    }else{
                        Interfaz.error=1;
                        Interfaz.salida.setText(Interfaz.salida.getText()+"No pertenece a ninguna funcion, debe estar adentro de una funcion. Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n");
                    }
                  
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",12, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // op_aritmeticas ::= tipos ID ASSIGNATIONS PAR_LEFT literal operaciones op_aritmeticas PAR_RIGHT operaciones op_aritmeticas 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-9)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-9)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-8)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)).right;
		String asig = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;
		int op_aleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int op_aright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		Object op_a = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int op_a2left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int op_a2right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object op_a2 = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		if(!parser.ambito.equals("inicio")){
                        String[] arreglo = (String[])lit; 
                    if(arreglo[1] == "integer" || arreglo[1] == "float"){
                    if(parser.tablaSim.existeEnTabla(id.toString(),parser.ambito)){
                        Interfaz.error =1;
                        Interfaz.salida.setText(Interfaz.salida.getText()+"La variable "+id +" ya fue declarada. Error En la linea: "+(idleft+1)+" en la columna: "+(idright+1)+"\n");
                    }else{
                        String temp = pl + arreglo[0] + op +op_a +pr + op2 + op_a2; 
                        parser.tablaSim.agregar(id.toString(),(type)tipo,parser.ambito,"");
                        parser.tablaSim.getlinea(id.toString(),parser.ambito).setValor(temp);
                        System.out.print("\ntemp="+  temp);
                        RESULT =temp;
                     }
                      }else{
                        Interfaz.error=1;
                        Interfaz.salida.setText(Interfaz.salida.getText()+"No se puede hacer la operacion con variable de tipo: "+arreglo[1]+". Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n");
                    
                    }
                    }else{
                        Interfaz.error=1;
                        Interfaz.salida.setText(Interfaz.salida.getText()+"No pertenece a ninguna funcion, debe estar adentro de una funcion. Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n");
                    }
                     RESULT = "0";
                  
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",12, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-9)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // op_aritmeticas ::= PAR_LEFT ID operaciones op_aritmeticas PAR_RIGHT 
            {
              Object RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int op_aleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int op_aright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Object op_a = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int prright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		if(!parser.ambito.equals("inicio")){
                    if(!parser.tablaSim.existeEnTabla(id.toString(),parser.ambito)){
                    Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"No se ha declarado la variable: "+id.toString()+" Error En la linea: " +(idleft+1) + " en la columna: "+(idright+1)+"\n");
                    }else{ 
                    String temp2 =  parser.tablaSim.getlinea(id.toString(),parser.ambito).getValor();
                    String temp = pl + temp2 + op+ op_a +pr;
                    System.out.print("\ntemp="+  temp);                    
                    RESULT =temp;
                    }
                    }else{
                        Interfaz.error=1;
                        Interfaz.salida.setText(Interfaz.salida.getText()+"No pertenece a ninguna funcion, debe estar adentro de una funcion. Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n");
                    }
                
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",12, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // op_aritmeticas ::= PAR_LEFT ID operaciones op_aritmeticas PAR_RIGHT operaciones op_aritmeticas 
            {
              Object RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;
		int op_aleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int op_aright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		Object op_a = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int op_a2left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int op_a2right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object op_a2 = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		if(!parser.ambito.equals("inicio")){
                    if(!parser.tablaSim.existeEnTabla(id.toString(),parser.ambito)){
                    Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"No se ha declarado la variable: "+id.toString()+" Error En la linea: " +(idleft+1) + " en la columna: "+(idright+1)+"\n");
                    } else{
                    String temp2 = parser.tablaSim.getlinea(id.toString(),parser.ambito).getValor();
                    String temp = pl + temp2 +op + op_a +pr + op2 +op_a2;
                    System.out.print("\ntemp="+  temp);
                    RESULT =temp;
                    }
                    }else{
                        Interfaz.error=1;
                        Interfaz.salida.setText(Interfaz.salida.getText()+"No pertenece a ninguna funcion, debe estar adentro de una funcion. Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n");
                    }
                
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",12, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // op_aritmeticas ::= PAR_LEFT literal PAR_RIGHT 
            {
              Object RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int prright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		if(!parser.ambito.equals("inicio")){
                   String[] arreglo = (String[])lit; 
                   if(arreglo[1] == "integer" || arreglo[1] == "float"){
                   String temp = pl + arreglo[0] + pr;
                   System.out.print("\ntemp="+  temp);
                   RESULT =temp;
                   }else{
                        Interfaz.error=1;
                        Interfaz.salida.setText(Interfaz.salida.getText()+"No se puede hacer la operacion con variable de tipo: "+arreglo[1]+". Error en la linea: "+(plleft+1) + " en la columna: "+(plright+1)+"\n");
                    
                    }
                   }else{
                        Interfaz.error=1;
                        Interfaz.salida.setText(Interfaz.salida.getText()+"No pertenece a ninguna funcion, debe estar adentro de una funcion. Error en la linea: "+(plleft+1) + " en la columna: "+(plright+1)+"\n");
                    }
                 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",12, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // op_aritmeticas ::= PAR_LEFT literal PAR_RIGHT operaciones op_aritmeticas 
            {
              Object RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int op_aleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int op_aright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object op_a = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		if(!parser.ambito.equals("inicio")){
                   String[] arreglo = (String[])lit; 
                   if(arreglo[1] == "integer" || arreglo[1] == "float"){
                   String temp = pl + arreglo[0] + pr +op+ op_a;
                   System.out.print("\ntemp="+  temp);
                   RESULT =temp;
                   }else{
                        Interfaz.error=1;
                        Interfaz.salida.setText(Interfaz.salida.getText()+"No se puede hacer la operacion con variable de tipo: "+arreglo[1]+". Error en la linea: "+(plleft+1) + " en la columna: "+(plright+1)+"\n");
                   }
                   }else{
                        Interfaz.error=1;
                        Interfaz.salida.setText(Interfaz.salida.getText()+"No pertenece a ninguna funcion, debe estar adentro de una funcion. Error en la linea: "+(plleft+1) + " en la columna: "+(plright+1)+"\n");
                    }
                 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",12, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // op_aritmeticas ::= PAR_LEFT literal operaciones op_aritmeticas PAR_RIGHT 
            {
              Object RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int op_aleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int op_aright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Object op_a = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int prright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		if(!parser.ambito.equals("inicio")){
                   String[] arreglo = (String[])lit;  
                   if(arreglo[1] == "integer" || arreglo[1] == "float"){
                   String temp = pl + arreglo[0] +op + op_a +pr;
                   System.out.print("\ntemp="+  temp);
                   RESULT = temp;
                   }else{
                        Interfaz.error=1;
                        Interfaz.salida.setText(Interfaz.salida.getText()+"No se puede hacer la operacion con variable de tipo: "+arreglo[1]+". Error en la linea: "+(plleft+1) + " en la columna: "+(plright+1)+"\n");
                   }
                   }else{
                        Interfaz.error=1;
                        Interfaz.salida.setText(Interfaz.salida.getText()+"No pertenece a ninguna funcion, debe estar adentro de una funcion. Error en la linea: "+(plleft+1) + " en la columna: "+(plright+1)+"\n");
                    }
                 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",12, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // op_aritmeticas ::= PAR_LEFT literal operaciones op_aritmeticas PAR_RIGHT operaciones op_aritmeticas 
            {
              Object RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;
		int op_aleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int op_aright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		Object op_a = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int op_a2left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int op_a2right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object op_a2 = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		if(!parser.ambito.equals("inicio")){
                    String[] arreglo = (String[])lit;  
                    if(arreglo[1] == "integer" || arreglo[1] == "float"){
                    String temp = pl +arreglo[0]+ op+op_a +pr + op2 +op_a2;
                    System.out.print("\ntemp="+  temp);
                    RESULT = temp;
                    }else{
                        Interfaz.error=1;
                        Interfaz.salida.setText(Interfaz.salida.getText()+"No se puede hacer la operacion con variable de tipo: "+arreglo[1]+". Error en la linea: "+(plleft+1) + " en la columna: "+(plright+1)+"\n");
                   }
                    }else{
                        Interfaz.error=1;
                        Interfaz.salida.setText(Interfaz.salida.getText()+"No pertenece a ninguna funcion, debe estar adentro de una funcion. Error en la linea: "+(plleft+1) + " en la columna: "+(plright+1)+"\n");
                    }
                 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",12, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // op_aritmeticas ::= literal 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		if(!parser.ambito.equals("inicio")){
                    String[] arreglo = (String[])lit; 
                     if(arreglo[1] == "integer" || arreglo[1] == "float"){
                    RESULT = arreglo[0];
                    }else{
                        Interfaz.error=1;
                        Interfaz.salida.setText(Interfaz.salida.getText()+"No se puede hacer la operacion con variable de tipo: "+arreglo[1]+". Error en la linea: "+(litleft+1) + " en la columna: "+(litright+1)+"\n");
                   }
                    }else{
                        Interfaz.error=1;
                        Interfaz.salida.setText(Interfaz.salida.getText()+"No pertenece a ninguna funcion, debe estar adentro de una funcion. Error en la linea: "+(litleft+1) + " en la columna: "+(litright+1)+"\n");
                    }
                 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",12, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // op_aritmeticas ::= literal operaciones op_aritmeticas 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int op_aleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int op_aright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object op_a = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		if(!parser.ambito.equals("inicio")){
                    String[] arreglo = (String[])lit; 
                     if(arreglo[1] == "integer" || arreglo[1] == "float"){
                    RESULT = arreglo[0] + op + op_a;
                    }else{
                        Interfaz.error=1;
                        Interfaz.salida.setText(Interfaz.salida.getText()+"No se puede hacer la operacion con variable de tipo: "+arreglo[1]+". Error en la linea: "+(opleft+1) + " en la columna: "+(opright+1)+"\n");
                   }
                    }else{
                        Interfaz.error=1;
                        Interfaz.salida.setText(Interfaz.salida.getText()+"No pertenece a ninguna funcion, debe estar adentro de una funcion. Error en la linea: "+(litleft+1) + " en la columna: "+(litright+1)+"\n");
                    }
                 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",12, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // op_aritmeticas ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		if(!parser.ambito.equals("inicio")){
                    if(!parser.tablaSim.existeEnTabla(id.toString(),parser.ambito)){
                    Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"No se ha declarado la variable: "+id.toString()+" Error En la linea: " +(idleft+1) + " en la columna: "+(idright+1)+"\n");
                    } else{
                     parser.tipito = parser.tablaSim.getlinea(id.toString(),parser.ambito).getTipo().toString();
                    parser.tipitos.add(parser.tipito);
                    RESULT = parser.tablaSim.getlinea(id.toString(),parser.ambito).getValor();
                    }
                    }else{
                        Interfaz.error=1;
                        Interfaz.salida.setText(Interfaz.salida.getText()+"No pertenece a ninguna funcion, debe estar adentro de una funcion. Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n");
                    }
                
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",12, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // op_aritmeticas ::= ID PAR_LEFT lista_parametros2 PAR_RIGHT operaciones op_aritmeticas 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int op_aleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int op_aright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object op_a = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		if(!parser.ambito.equals("inicio")){
                    
                   Collections.reverse(parser.paramsId);
                   ArrayList<type> temp = new ArrayList<type>();
                   int contador =0;
                    if(!parser.tablaSim.existeEnTabla(id.toString(),parser.ambito_inicial)){
                    Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"No se ha declarado la variable: "+id.toString()+" Error En la linea: " +(idleft+1) + " en la columna: "+(idright+1)+"\n");
                    }
                     else{
                    for(id_params i: parser.id_par){
                        if(i.getId().equals( id.toString())){
                            if(i.getTipos() != null){
                            temp.addAll(i.getTipos());
                            }
                        }
                    }
                    System.out.print("\ntemp"+temp.size());
                    if(temp.size()!= 0){
                   for(id_params i: parser.id_par){
                   if((i.getId().toString().equals( id.toString()) && i.getTipos().toString().equals(parser.paramsId.toString()))){
                      contador++;
                    }
                   }
                   if (contador==0){
                      Interfaz.error=1;
                      Interfaz.salida.setText(Interfaz.salida.getText()+"Incompatibilidad de tipos en el envio de los parametros en la funcion: "+id +", se esperaba: "+temp.toString()+" Se encontro: "+parser.paramsId+". Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n");
                    }
                }else{
                    Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"La funcion: "+id.toString()+"() no recibe ningun parametro . Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n");              
                }
                 parser.tipito = (parser.tablaSim.getlinea(id.toString(), parser.ambito_inicial).getTipo().toString());
                parser.tipitos.add(parser.tipito);
                parser.paramsId.clear();
               String  temp2 = parser.tablaSim.getlinea(id.toString(),parser.ambito_inicial).getValor();
                 RESULT = temp2;
                }
               
                    
                    
                
              }else{
                    Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"No pertenece a ninguna funcion, debe estar adentro de una funcion. Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n");
               }
                   
                
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",12, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // op_aritmeticas ::= ID PAR_LEFT PAR_RIGHT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		if(!parser.ambito.equals("inicio")){
                    if(!parser.tablaSim.existeEnTabla(id.toString(),parser.ambito_inicial)){
                    Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"No se ha declarado la variable: "+id.toString()+" Error En la linea: " +(idleft+1) + " en la columna: "+(idright+1)+"\n");
                    }else{ 
                    String temp = parser.tablaSim.getlinea(id.toString(),parser.ambito_inicial).getValor();
                    System.out.print("\nid= "+id.toString() + temp);
                    RESULT = temp;
                    }
                  }else{
                        Interfaz.error=1;
                        Interfaz.salida.setText(Interfaz.salida.getText()+"No pertenece a ninguna funcion, debe estar adentro de una funcion. Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n");
                    }
                
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",12, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // op_aritmeticas ::= ID PAR_LEFT PAR_RIGHT operaciones op_aritmeticas 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int op_aleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int op_aright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object op_a = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		if(!parser.ambito.equals("inicio")){
                    if(!parser.tablaSim.existeEnTabla(id.toString(),parser.ambito_inicial)){
                    Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"No se ha declarado la variable: "+id.toString()+" Error En la linea: " +(idleft+1) + " en la columna: "+(idright+1)+"\n");
                    }else{
                    String temp = parser.tablaSim.getlinea(id.toString(),parser.ambito_inicial).getValor() +op+ op_a;
                    System.out.print("\nid= "+id.toString() + temp);
                    RESULT = temp;
                    }
                    }else{
                        Interfaz.error=1;
                        Interfaz.salida.setText(Interfaz.salida.getText()+"No pertenece a ninguna funcion, debe estar adentro de una funcion. Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n");
                    }
                
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",12, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // op_aritmeticas ::= ID operaciones op_aritmeticas 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int op_aleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int op_aright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object op_a = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		if(!parser.ambito.equals("inicio")){
                    if(!parser.tablaSim.existeEnTabla(id.toString(),parser.ambito)){
                    Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"No se ha declarado la variable: "+id.toString()+" Error En la linea: " +(idleft+1) + " en la columna: "+(idright+1)+"\n");
                    }else{ 
                    String temp = parser.tablaSim.getlinea(id.toString(),parser.ambito).getValor() +op + op_a;
                    System.out.print("\nid= "+id.toString() + temp);
                     parser.tipito = parser.tablaSim.getlinea(id.toString(),parser.ambito).getTipo().toString();
                    parser.tipitos.add(parser.tipito);
                    RESULT = temp;
                    }
                    }else{
                        Interfaz.error=1;
                        Interfaz.salida.setText(Interfaz.salida.getText()+"No pertenece a ninguna funcion, debe estar adentro de una funcion. Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n");
                    }
                
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",12, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // op_aritmeticas ::= ID ASSIGNATIONS literal operaciones op_aritmeticas 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		String asig = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int op_aleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int op_aright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object op_a = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		if(!parser.ambito.equals("inicio")){
                    String[] arreglo = (String[])lit; 
                    if(arreglo[1] == "integer" || arreglo[1] == "float"){
                    if(!parser.tablaSim.existeEnTabla(id.toString(),parser.ambito)){
                    Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"No se ha declarado la variable: "+id.toString()+" Error En la linea: " +(idleft+1) + " en la columna: "+(idright+1)+"\n");
                    }else{ 
                    String temp = arreglo[0] + op +op_a;
                    parser.tablaSim.getlinea(id.toString(),parser.ambito).setValor(temp);
                    System.out.print("\nid= "+id.toString()+temp);
                    RESULT =temp;
                    }
                    }else{
                        Interfaz.error=1;
                        Interfaz.salida.setText(Interfaz.salida.getText()+"No se puede hacer la operacion con variable de tipo: "+arreglo[1]+". Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n");
                   }
                    }else{
                        Interfaz.error=1;
                        Interfaz.salida.setText(Interfaz.salida.getText()+"No pertenece a ninguna funcion, debe estar adentro de una funcion. Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n");
                    }
                
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",12, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // op_aritmeticas ::= ID ASSIGNATIONS ID operaciones op_aritmeticas 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		String asig = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int op_aleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int op_aright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object op_a = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		if(!parser.ambito.equals("inicio")){
                    if(!parser.tablaSim.existeEnTabla(id.toString(),parser.ambito)){
                    Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"No se ha declarado la variable: "+id.toString()+" Error En la linea: " +(idleft+1) + " en la columna: "+(idright+1)+"\n");
                    }
                    if(!parser.tablaSim.existeEnTabla(id1.toString(),parser.ambito)){
                    Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"No se ha declarado la variable: "+id1.toString()+" Error En la linea: " +(id1left+1) + " en la columna: "+(id1right+1)+"\n");
                    }
                    if(parser.tablaSim.existeEnTabla(id.toString(),parser.ambito)&&parser.tablaSim.existeEnTabla(id1.toString(),parser.ambito)){
                    String temp2 = parser.tablaSim.getlinea(id1.toString(),parser.ambito).getValor();
                    String temp =temp2+op+op_a;
                    parser.tablaSim.getlinea(id.toString(),parser.ambito).setValor(temp);
                    System.out.print("\nid= "+id.toString()+temp);
                    RESULT = temp;
                    }
                    }else{
                        Interfaz.error=1;
                        Interfaz.salida.setText(Interfaz.salida.getText()+"No pertenece a ninguna funcion, debe estar adentro de una funcion. Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n");
                    }
                 
                
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",12, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // op_aritmeticas ::= tipos ID ASSIGNATIONS ID operaciones op_aritmeticas 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		String asig = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int op_aleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int op_aright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object op_a = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		if(!parser.ambito.equals("inicio")){
                    if(parser.tablaSim.existeEnTabla(id.toString(),parser.ambito)){
                        Interfaz.error =1;
                        Interfaz.salida.setText(Interfaz.salida.getText()+"La variable "+id +" ya fue declarada. Error En la linea: "+(idleft+1)+" en la columna: "+(idright+1)+"\n");
                    }
                     if(parser.tablaSim.existeEnTabla(id1.toString(),parser.ambito)){
                        parser.tablaSim.agregar(id.toString(),(type)tipo,parser.ambito,parser.tablaSim.getlinea(id1.toString(),parser.ambito).getValor());
                        }else{
                            Interfaz.error=1;
                            Interfaz.salida.setText(Interfaz.salida.getText()+"No se ha declarado la variable: "+id1.toString()+" Error En la linea: " +(id1left+1) + " en la columna: "+(id1right+1)+"\n");
                        }
                        if(parser.tablaSim.existeEnTabla(id.toString(),parser.ambito)&&parser.tablaSim.existeEnTabla(id1.toString(),parser.ambito)){
                        String temp = parser.tablaSim.getlinea(id1.toString(),parser.ambito).getValor();
                        String temp2 = temp + op + op_a;
                        parser.tablaSim.getlinea(id.toString(),parser.ambito).setValor(temp2);
                        System.out.print("\nid= "+id.toString()+temp2);
                        RESULT = temp2;
                        }
                        }else{
                        Interfaz.error=1;
                        Interfaz.salida.setText(Interfaz.salida.getText()+"No pertenece a ninguna funcion, debe estar adentro de una funcion. Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n");
                    }
                   
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",12, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // op_aritmeticas ::= tipos ID ASSIGNATIONS literal operaciones op_aritmeticas 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		String asig = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int op_aleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int op_aright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object op_a = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		if(!parser.ambito.equals("inicio")){
                    String[] arreglo = (String[])lit;  
                    if(arreglo[1] == "integer" || arreglo[1] == "float"){
                    if(parser.tablaSim.existeEnTabla(id.toString(),parser.ambito)){
                        Interfaz.error =1;
                        Interfaz.salida.setText(Interfaz.salida.getText()+"La variable "+id +" ya fue declarada. Error En la linea: "+(idleft+1)+" en la columna: "+(idright+1)+"\n");
                    }
                     else{
                        parser.tablaSim.agregar(id.toString(),(type)tipo,parser.ambito,"");
                        String temp = arreglo[0] + op+ op_a;
                        System.out.print("\nid ="+id.toString()+temp);
                        parser.tablaSim.getlinea(id.toString(),parser.ambito).setValor(temp);
                        RESULT =temp;
                     }
                     }else{
                        Interfaz.error=1;
                        Interfaz.salida.setText(Interfaz.salida.getText()+"No se puede hacer la operacion con variable de tipo: "+arreglo[1]+". Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n");
                     }
                     }else{
                        Interfaz.error=1;
                        Interfaz.salida.setText(Interfaz.salida.getText()+"No pertenece a ninguna funcion, debe estar adentro de una funcion. Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n");
                    }
                   
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",12, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // operaciones ::= DIV 
            {
              Object RESULT =null;
		RESULT = "/";
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operaciones",19, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // operaciones ::= MULT 
            {
              Object RESULT =null;
		RESULT = "*";
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operaciones",19, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // operaciones ::= PLUS 
            {
              Object RESULT =null;
		RESULT = "+";
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operaciones",19, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // operaciones ::= MINUS 
            {
              Object RESULT =null;
		RESULT = "-";
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operaciones",19, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // return_value ::= RETURN ID PAR_LEFT lista_parametros2 PAR_RIGHT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Object par = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		if(!parser.ambito.equals("inicio")){
                 Collections.reverse(parser.paramsId);
                 ArrayList<type> temp = new ArrayList<type>();
                int contador =0;
                if(!parser.tablaSim.existeEnTabla(id.toString(),parser.ambito_inicial)){
                Interfaz.error=1;
                Interfaz.salida.setText(Interfaz.salida.getText()+"No se ha declarado la variable: "+id.toString()+" Error En la linea: " +(idleft+1) + " en la columna: "+(idright+1)+"\n");
                }
                else{
                    for(id_params i: parser.id_par){
                        if(i.getId().equals( id.toString())){
                            if(i.getTipos() != null){
                            temp.addAll(i.getTipos());
                            }
                        }
                    }
                    System.out.print("\ntemp"+temp.size());
                    if(temp.size()!= 0){
                   for(id_params i: parser.id_par){
                   if((i.getId().toString().equals( id.toString()) && i.getTipos().toString().equals(parser.paramsId.toString()))){
                      contador++;
                      
                    }
                   }
                   if (contador==0){
                      Interfaz.error=1;
                      Interfaz.salida.setText(Interfaz.salida.getText()+"Incompatibilidad de tipos en el envio de los parametros en la funcion: "+id +", se esperaba: "+temp.toString()+" Se encontro: "+parser.paramsId+". Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n");
                    }
                }else{
                    Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"La funcion: "+id.toString()+"() no recibe ningun parametro . Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n");
               
                }
                parser.paramsId.clear();
                parser.tipito = (parser.tablaSim.getlinea(id.toString(), parser.ambito_inicial).getTipo().toString());
                parser.tipitos.add(parser.tipito);
                }
                
                parser.paramsId.clear();

                
              }else{
                    Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"No pertenece a ninguna funcion, debe estar adentro de una funcion. Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n");
               }
               
                RESULT ="psps323ps";
                
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_value",14, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // return_value ::= RETURN ID PAR_LEFT lista_parametros2 PAR_RIGHT operaciones op_aritmeticas 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		Object par = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int op_aleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int op_aright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object op_a = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		if(!parser.ambito.equals("inicio")){
                 Collections.reverse(parser.paramsId);
                 ArrayList<type> temp = new ArrayList<type>();
                int contador =0;
                if(!parser.tablaSim.existeEnTabla(id.toString(),parser.ambito_inicial)){
                Interfaz.error=1;
                Interfaz.salida.setText(Interfaz.salida.getText()+"No se ha declarado la variable: "+id.toString()+" Error En la linea: " +(idleft+1) + " en la columna: "+(idright+1)+"\n");
                RESULT = "lLl";
                }
                else{
                    for(id_params i: parser.id_par){
                        if(i.getId().equals( id.toString())){
                            if(i.getTipos() != null){
                            temp.addAll(i.getTipos());
                            }
                        }
                    }
                    System.out.print("\ntemp"+temp.size());
                    if(temp.size()!= 0){
                   for(id_params i: parser.id_par){
                   if((i.getId().toString().equals( id.toString()) && i.getTipos().toString().equals(parser.paramsId.toString()))){
                      contador++;
                      
                    }
                   }
                   if (contador==0){
                      Interfaz.error=1;
                      Interfaz.salida.setText(Interfaz.salida.getText()+"Incompatibilidad de tipos en el envio de los parametros en la funcion: "+id +", se esperaba: "+temp.toString()+" Se encontro: "+parser.paramsId+". Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n");
                    }
                }else{
                    Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"La funcion: "+id.toString()+"() no recibe ningun parametro . Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n");
               
                }
                 parser.tipito = (parser.tablaSim.getlinea(id.toString(), parser.ambito_inicial).getTipo().toString());
                parser.tipitos.add(parser.tipito);
                String temp1 = parser.tablaSim.getlinea(id.toString(),parser.ambito).getValor() +op + op_a;
                parser.expression = temp1;
                 parser.paramsId.clear();
                }
               
              }else{
                    Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"No pertenece a ninguna funcion, debe estar adentro de una funcion. Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n");
               }
               parser.paramsId.clear();
                RESULT ="psps323ps";
                
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_value",14, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // return_value ::= RETURN ID PAR_LEFT PAR_RIGHT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		if(!parser.tablaSim.existeEnTabla(id.toString(),parser.ambito_inicial)){
                    Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"No se ha declarado la variable: "+id.toString()+" Error En la linea: " +(idleft+1) + " en la columna: "+(idright+1)+"\n");
                 }
                 if(parser.tablaSim.getlinea(id.toString(), parser.ambito_inicial).getTipo().toString() == "void"){
                     Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"No puede mandarse como valor de retorno una funcion de tipo: void."+" Error En la linea: " +(idleft+1) + " en la columna: "+(idright+1)+"\n");
                
                 }else{
                  parser.tipito = (parser.tablaSim.getlinea(id.toString(), parser.ambito_inicial).getTipo().toString());
                  parser.tipitos.add(parser.tipito);
                 }
                  System.out.print(parser.tablaSim.getLineasTabla()+"\n ");
                 RESULT = "pasalwlw323";
                
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_value",14, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // return_value ::= RETURN literal operaciones op_aritmeticas 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int op_aleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int op_aright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object op_a = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		if(!parser.ambito.equals("inicio")){
                    String[] arreglo = (String[])lit; 
                     if(arreglo[1] == "integer" || arreglo[1] == "float"){
                     parser.expression =arreglo[0] + op + op_a;
                     parser.tipito = arreglo[1];
                    // parser.tipitos.add(parser.tipito);
                    RESULT = "blalblablaba";
                    }else{
                        Interfaz.error=1;
                        Interfaz.salida.setText(Interfaz.salida.getText()+"No se puede hacer la operacion con variable de tipo: "+arreglo[1]+". Error en la linea: "+(opleft+1) + " en la columna: "+(opright+1)+"\n");
                   }
                    }else{
                        Interfaz.error=1;
                        Interfaz.salida.setText(Interfaz.salida.getText()+"No pertenece a ninguna funcion, debe estar adentro de una funcion. Error en la linea: "+(litleft+1) + " en la columna: "+(litright+1)+"\n");
                    }
                 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_value",14, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // return_value ::= RETURN ID operaciones op_aritmeticas 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int op_aleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int op_aright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object op_a = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		if(!parser.ambito.equals("inicio")){
                    if(!parser.tablaSim.existeEnTabla(id.toString(),parser.ambito)){
                    Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"No se ha declarado la variable: "+id.toString()+" Error En la linea: " +(idleft+1) + " en la columna: "+(idright+1)+"\n");
                    }else{ 
                    String temp = parser.tablaSim.getlinea(id.toString(),parser.ambito).getValor() +op + op_a;
                    System.out.print("\nid= "+id.toString() + temp);
                    parser.expression = temp;
                    parser.tipito = parser.tablaSim.getlinea(id.toString(),parser.ambito).getTipo().toString();
                    parser.tipitos.add(parser.tipito);
                    RESULT = "blalbla33blaba";
                    }
                    }else{
                        Interfaz.error=1;
                        Interfaz.salida.setText(Interfaz.salida.getText()+"No pertenece a ninguna funcion, debe estar adentro de una funcion. Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n");
                    }
                
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_value",14, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // return_value ::= RETURN ID PAR_LEFT PAR_RIGHT operaciones op_aritmeticas 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int op_aleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int op_aright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object op_a = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		if(!parser.ambito.equals("inicio")){
                    if(!parser.tablaSim.existeEnTabla(id.toString(),parser.ambito_inicial)){
                    Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"No se ha declarado la variable: "+id.toString()+" Error En la linea: " +(idleft+1) + " en la columna: "+(idright+1)+"\n");
                    }else{
                        String temp = parser.tablaSim.getlinea(id.toString(),parser.ambito_inicial).getValor() +op + op_a;
                        parser.expression = temp;
                        parser.tipito = parser.tablaSim.getlinea(id.toString(),parser.ambito_inicial).getTipo().toString();
                        parser.tipitos.add(parser.tipito);
                        RESULT = "blalbla33blaba";
                    }
                 }else{
                        Interfaz.error=1;
                        Interfaz.salida.setText(Interfaz.salida.getText()+"No pertenece a ninguna funcion, debe estar adentro de una funcion. Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n");
                    }  
                
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_value",14, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // return_value ::= RETURN ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		RESULT = id.toString();
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_value",14, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // return_value ::= RETURN literal 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		RESULT = lit;
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_value",14, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // return_value ::= RETURN literal_String 
            {
              Object RESULT =null;
		int st_litleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int st_litright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object st_lit = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		RESULT = st_lit;
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_value",14, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // lista_parametros2 ::= error 
            {
              Object RESULT =null;
		Interfaz.salida.setText(Interfaz.salida.getText()+"Error en los parametros 2" +"\n");
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("lista_parametros2",11, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // lista_parametros2 ::= literal_String 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		if(!parser.ambito.equals("inicio")){
                                            String[] arreglo = (String[])lit;
                                                         parser.paramsId.add(arreglo[1]);
                                                         }
                                                      
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("lista_parametros2",11, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // lista_parametros2 ::= literal_String COMMA lista_parametros2 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		if(!parser.ambito.equals("inicio")){
                                                        String[] arreglo = (String[])lit;
                                                        parser.paramsId.add(arreglo[1]);
                                                        }
                                                      
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("lista_parametros2",11, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // lista_parametros2 ::= literal 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		if(!parser.ambito.equals("inicio")){
                                        String[] arreglo = (String[])lit;
                                                        parser.paramsId.add(arreglo[1]);
                                                        }
                                                      
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("lista_parametros2",11, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // lista_parametros2 ::= literal COMMA lista_parametros2 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		if(!parser.ambito.equals("inicio")){
                                                        String[] arreglo = (String[])lit;
                                                        parser.paramsId.add(arreglo[1]);
                                                        }
                                                      
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("lista_parametros2",11, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // lista_parametros2 ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		if((!parser.ambito.equals("inicio"))&& parser.tablaSim.existeEnTabla(id.toString(),parser.ambito)){
                            parser.paramsId.add(parser.tablaSim.getlinea(id.toString(),parser.ambito).getTipo().toString());
                            if(parser.tablaSim.getlinea(id.toString(),parser.ambito).getValor().toString() == ""){
                                Interfaz.error=1;
                                Interfaz.salida.setText(Interfaz.salida.getText()+"No se ha asignado valor a la variable: "+id.toString()+" Error En la linea: " +(idleft+1) + " en la columna: "+(idright+1)+"\n");
                                                   
                            }
                            }else{
                                                      Interfaz.error=1;
                                                      Interfaz.salida.setText(Interfaz.salida.getText()+"No se ha declarado la variable: "+id.toString()+" Error En la linea: " +(idleft+1) + " en la columna: "+(idright+1)+"\n");
                                                    }
                           
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("lista_parametros2",11, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // lista_parametros2 ::= ID COMMA lista_parametros2 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		if((!parser.ambito.equals("inicio"))&& parser.tablaSim.existeEnTabla(id.toString(),parser.ambito)){
                                                    parser.paramsId.add(parser.tablaSim.getlinea(id.toString(),parser.ambito).getTipo().toString());
                                                     if(parser.tablaSim.getlinea(id.toString(),parser.ambito).getValor().toString() == ""){
                                                      Interfaz.error=1;
                                                      Interfaz.salida.setText(Interfaz.salida.getText()+"No se ha asignado valor a la variable: "+id.toString()+" Error En la linea: " +(idleft+1) + " en la columna: "+(idright+1)+"\n");
                                                      
                                                    }
                                                   }else{
                                                      Interfaz.error=1;
                                                      Interfaz.salida.setText(Interfaz.salida.getText()+"No se ha declarado la variable: "+id.toString()+", Error En la linea: " +(idleft+1) + " en la columna: "+(idright+1)+"\n");
                                                    }
                                                   
                                                    
                                                 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("lista_parametros2",11, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // lista_parametros ::= error 
            {
              Object RESULT =null;
		Interfaz.salida.setText(Interfaz.salida.getText()+"Error en los parametros 1" +"\n");
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("lista_parametros",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // lista_parametros ::= tipos ID 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		String[] array = new String[1];
                                      array[0] = tipo.toString();
                                      parser.paramsId.add(id.toString());
                                       parser.parametros.add((type)tipo);
                                     
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("lista_parametros",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // lista_parametros ::= tipos ID COMMA lista_parametros 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		String[] array = new String[1];
                                                              array[0] = tipo.toString();
                                                              parser.paramsId.add(id.toString());
                                                              parser.parametros.add((type)tipo);
                                                              
                                                            
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("lista_parametros",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // assignaciones ::= error 
            {
              Object RESULT =null;
		Interfaz.salida.setText(Interfaz.salida.getText()+"Error en las asignaciones" +"\n");
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("assignaciones",9, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // assignaciones ::= ID OPERADORES ID PAR_LEFT lista_parametros2 PAR_RIGHT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		if(!parser.ambito.equals("inicio")){
                  Collections.reverse(parser.paramsId);
                  ArrayList<type> temp = new ArrayList<type>();
                  int contador =0;
                  if(!parser.tablaSim.existeEnTabla(id.toString(),parser.ambito)){
                        Interfaz.error=1;
                        Interfaz.salida.setText(Interfaz.salida.getText()+"No se ha declarado la variable: "+id.toString()+" Error En la linea: " +(idleft+1) + " en la columna: "+(idright+1)+"\n");
                   }
                  if(!parser.tablaSim.existeEnTabla(id1.toString(),parser.ambito)){
                        Interfaz.error=1;
                        Interfaz.salida.setText(Interfaz.salida.getText()+"No se ha declarado la variable: "+id1.toString()+" Error En la linea: " +(id1left+1) + " en la columna: "+(id1right+1)+"\n");
                   }else{
                    
                   for(id_params i: parser.id_par){
                        if(i.getId().equals( id1.toString())){
                             if(i.getTipos() != null){
                                temp.addAll(i.getTipos());
                            }
                        }
                    }
                    if(parser.tablaSim.getlinea(id.toString(),parser.ambito).getTipo().toString() == parser.tablaSim.getlinea(id1.toString(),parser.ambito_inicial).getTipo().toString()){
                         if(temp.size()!= 0){
                        for(id_params i: parser.id_par){
                          if((i.getId().toString().equals( id1.toString()) && i.getTipos().toString().equals(parser.paramsId.toString()))){
                             contador++;
                           }
                          }
                        }else{
                        Interfaz.error=1;
                        Interfaz.salida.setText(Interfaz.salida.getText()+"La funcion: "+id.toString()+"() no recibe ningun parametro . Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n");

                         }
                    }
                    if (contador==0){
                      Interfaz.error=1;
                      Interfaz.salida.setText(Interfaz.salida.getText()+"Incompatibilidad de tipos en el envio de los parametros en la funcion: "+id1 +", se esperaba: "+temp.toString()+" Se encontro: "+parser.paramsId+". Error en la linea: "+(id1left+1) + " en la columna: "+(id1right+1)+"\n");
                    }else{
                        parser.tablaSim.getlinea(id.toString(),parser.ambito).setValor(parser.tablaSim.getlinea(id1.toString(),parser.ambito_inicial).getValor().toString());
                    }
                    parser.paramsId.clear();
                    }
                }else{
                    Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"No pertenece a ninguna funcion, debe estar adentro de una funcion. Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n");
               }
               
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("assignaciones",9, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // assignaciones ::= ID OPERADORES ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		if(!parser.ambito.equals("inicio")){
                   if(!parser.tablaSim.existeEnTabla(id.toString(),parser.ambito)){
                        Interfaz.error=1;
                        Interfaz.salida.setText(Interfaz.salida.getText()+"No se ha declarado la variable: "+id.toString()+" Error En la linea: " +(idleft+1) + " en la columna: "+(idright+1)+"\n");
                   }
                   if(!parser.tablaSim.existeEnTabla(id1.toString(),parser.ambito)){
                        Interfaz.error=1;
                        Interfaz.salida.setText(Interfaz.salida.getText()+"No se ha declarado la variable: "+id1.toString()+" Error En la linea: " +(id1left+1) + " en la columna: "+(id1right+1)+"\n");
                   }else
                   if(parser.tablaSim.getlinea(id.toString(),parser.ambito).getTipo().toString() != parser.tablaSim.getlinea(id1.toString(),parser.ambito).getTipo().toString()){
                        Interfaz.error=1;
                        Interfaz.salida.setText(Interfaz.salida.getText()+"Incompatibilidad de tipos en la comparacion "+parser.tablaSim.getlinea(id.toString(),parser.ambito).getTipo()+" con "+parser.tablaSim.getlinea(id1.toString(),parser.ambito).getTipo()+", Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n");                
                    
                   }
                 }else{
                    Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"No pertenece a ninguna funcion, debe estar adentro de una funcion. Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n");
               }
                
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("assignaciones",9, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // assignaciones ::= ID OPERADORES literal_String 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		if(!parser.ambito.equals("inicio")){
                    String[] arreglo = (String[])lit;
                    if(!parser.tablaSim.existeEnTabla(id.toString(),parser.ambito)){
                        Interfaz.error=1;
                        Interfaz.salida.setText(Interfaz.salida.getText()+"No se ha declarado la variable: "+id.toString()+" Error En la linea: " +(idleft+1) + " en la columna: "+(idright+1)+"\n");
                   }else
                    if(parser.tablaSim.getlinea(id.toString(),parser.ambito).getTipo().toString() != arreglo[1]){
                            Interfaz.error=1;
                            Interfaz.salida.setText(Interfaz.salida.getText()+"Incompatibilidad de tipos en la comparacion "+parser.tablaSim.getlinea(id.toString(),parser.ambito).getTipo()+" con "+arreglo[1] +", Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n");                
                    
                        }
                    }else{
                    Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"No pertenece a ninguna funcion, debe estar adentro de una funcion. Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n");
               }
                   
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("assignaciones",9, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // assignaciones ::= ID OPERADORES literal 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		if(!parser.ambito.equals("inicio")){
                    String[] arreglo = (String[])lit;
                        if(!parser.tablaSim.existeEnTabla(id.toString(),parser.ambito)){
                        Interfaz.error=1;
                        Interfaz.salida.setText(Interfaz.salida.getText()+"No se ha declarado la variable: "+id.toString()+" Error En la linea: " +(idleft+1) + " en la columna: "+(idright+1)+"\n");
                         }else
                         if(parser.tablaSim.getlinea(id.toString(),parser.ambito).getTipo().toString() != arreglo[1]){
                            Interfaz.error=1;
                            Interfaz.salida.setText(Interfaz.salida.getText()+"Incompatibilidad de tipos en la comparacion "+parser.tablaSim.getlinea(id.toString(),parser.ambito).getTipo()+" con "+arreglo[1] +", Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n");                
                    
                        }
                        RESULT = arreglo[0];
                 }else{
                    Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"No pertenece a ninguna funcion, debe estar adentro de una funcion. Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n");
                }
                   
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("assignaciones",9, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // incremento ::= error 
            {
              Object RESULT =null;
		Interfaz.salida.setText(Interfaz.salida.getText()+"ERROR en los incrementadores " +"\n");
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("incremento",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // incremento ::= ID INCREMENTADORES 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int incleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int incright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String inc = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 int numero;
               if(!parser.tablaSim.existeEnTabla(id.toString(),parser.ambito)){
                    Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"No se ha declarado la variable: "+id.toString()+" Error En la linea: " +(idleft+1) + " en la columna: "+(idright+1)+"\n");
                    }
              else{
                    if(inc == "++"){
                    numero=Integer.parseInt(parser.tablaSim.getlinea(id.toString(),parser.ambito).getValor()) + 1;
                    parser.tablaSim.getlinea(id.toString(),parser.ambito).setValor(Integer.toString(numero)); 
                    RESULT = Integer.toString(numero);
                    }else{
                        numero=Integer.parseInt(parser.tablaSim.getlinea(id.toString(),parser.ambito).getValor()) -1;
                    parser.tablaSim.getlinea(id.toString(),parser.ambito).setValor(Integer.toString(numero)); 
                    RESULT = Integer.toString(numero);
                    }
                  }
                 
              
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("incremento",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // inicial ::= error 
            {
              Object RESULT =null;
		Interfaz.salida.setText(Interfaz.salida.getText()+"ERROR en la inicializaciones " +"\n");
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("inicial",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // inicial ::= tipos ID ASSIGNATIONS literal_String 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 if(parser.tablaSim.existeEnTabla(id.toString(),parser.ambito)){
                Interfaz.error=1;
                Interfaz.salida.setText(Interfaz.salida.getText()+"La variable "+id +" ya fue declarada.  Error En la linea: "+(idleft+1)+" en la columna: "+(idright+1)+"\n");
             }else{
                String[] arreglo = (String[])lit;
                parser.tablaSim.agregar(id.toString(),(type)tipo,parser.ambito,arreglo[0]);
                RESULT= arreglo[0];
             }
            
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("inicial",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // inicial ::= tipos ID ASSIGNATIONS literal 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 if(parser.tablaSim.existeEnTabla(id.toString(),parser.ambito)){
                Interfaz.error=1;
                Interfaz.salida.setText(Interfaz.salida.getText()+"La variable "+id +" ya fue declarada.  Error En la linea: "+(idleft+1)+" en la columna: "+(idright+1)+"\n");
             }else{
                String[] arreglo = (String[])lit;
                parser.tablaSim.agregar(id.toString(),(type)tipo,parser.ambito,arreglo[0]);
                RESULT= arreglo[0];
             }
            
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("inicial",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // lista_assig3 ::= COMMA AMPERSAND ID lista_assig3 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		if(!parser.tablaSim.existeEnTabla(id.toString(),parser.ambito)){ 
                    Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"No se ha declarado la variable: "+id.toString()+" Error En la linea: " +(idleft+1) + " en la columna: "+(idright+1)+"\n");
                   } RESULT= id;
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("lista_assig3",16, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // lista_assig3 ::= COMMA AMPERSAND ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		if(!parser.tablaSim.existeEnTabla(id.toString(),parser.ambito)){ 
                    Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"No se ha declarado la variable: "+id.toString()+" Error En la linea: " +(idleft+1) + " en la columna: "+(idright+1)+"\n");
                   } RESULT= id;
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("lista_assig3",16, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // lista_assig2 ::= error 
            {
              Object RESULT =null;
		Interfaz.salida.setText(Interfaz.salida.getText()+"ERROR en la LISTA2 " +"\n");
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("lista_assig2",15, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // lista_assig2 ::= COMMA literal_String lista_assig2 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("lista_assig2",15, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // lista_assig2 ::= COMMA literal_String 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("lista_assig2",15, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // lista_assig2 ::= COMMA literal lista_assig2 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("lista_assig2",15, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // lista_assig2 ::= COMMA literal 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("lista_assig2",15, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // lista_assig2 ::= COMMA ID lista_assig2 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		if(!parser.tablaSim.existeEnTabla(id.toString(),parser.ambito)){ 
                    Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"No se ha declarado la variable: "+id.toString()+" Error En la linea: " +(idleft+1) + " en la columna: "+(idright+1)+"\n");
                   }
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("lista_assig2",15, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // lista_assig2 ::= COMMA ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		if(!parser.tablaSim.existeEnTabla(id.toString(),parser.ambito)){ 
                    Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"No se ha declarado la variable: "+id.toString()+" Error En la linea: " +(idleft+1) + " en la columna: "+(idright+1)+"\n");
                   }
                
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("lista_assig2",15, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // lista_assig ::= error 
            {
              Object RESULT =null;
		Interfaz.salida.setText(Interfaz.salida.getText() +"ERROR en el lista asignacion"+"\n");
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("lista_assig",13, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // lista_assig ::= COMMA ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		parser.lista.add(id.toString());
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("lista_assig",13, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // lista_assig ::= COMMA ID lista_assig 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		parser.lista.add(id.toString());
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("lista_assig",13, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // asig_or_and ::= assignaciones AND asig_or_and 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("asig_or_and",18, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // asig_or_and ::= assignaciones OR asig_or_and 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("asig_or_and",18, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // asig_or_and ::= assignaciones 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("asig_or_and",18, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // tipo_void ::= VOID 
            {
              Object RESULT =null;
		RESULT = new voidType();
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("tipo_void",6, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // tipos ::= FLOAT 
            {
              Object RESULT =null;
		RESULT = new floatType();
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("tipos",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tipos ::= STRING 
            {
              Object RESULT =null;
		RESULT = new stringType();
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("tipos",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // tipos ::= CHAR 
            {
              Object RESULT =null;
		RESULT = new charType();
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("tipos",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // tipos ::= INT 
            {
              Object RESULT =null;
		RESULT = new integerType();
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("tipos",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // literal_String ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object sl = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 String[] array = new String[2];
                                    array[1] = "string";
                                    array[0] = sl.toString();
                                    RESULT = array;
                                  
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("literal_String",2, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // literal ::= FLOAT_LITERAL 
            {
              Object RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object fl = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 String[] array = new String[2];
                            array[1] = "float";
                            array[0] = fl.toString();
                            RESULT = array;
                          
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // literal ::= CHAR_LITERAL 
            {
              Object RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object cl = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 String[] array = new String[2];
                            array[1] = "char";
                            array[0] = cl.toString();
                            RESULT = array;
                          
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // literal ::= INT_LITERAL 
            {
              Object RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object il = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 String[] array = new String[2];
                            array[1] = "integer";
                            array[0] = il.toString();
                            RESULT = array;
                          
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // elseif_stment ::= ELSEIF PAR_LEFT asig_or_and PAR_RIGHT BRACK_LEFT statements BRACK_RIGHT 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("elseif_stment",17, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // elseif_stment ::= ELSEIF PAR_LEFT asig_or_and PAR_RIGHT BRACK_LEFT statements BRACK_RIGHT elseif_stment 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("elseif_stment",17, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // statement ::= SCANF PAR_LEFT literal_String lista_assig3 PAR_RIGHT SEMICOLON 
            {
              Object RESULT =null;
		int semileft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		if(parser.ambito.equals("inicio")){
                Interfaz.error=1;
                Interfaz.salida.setText(Interfaz.salida.getText()+"No pertenece a ninguna funcion, debe estar adentro de una funcion. Error en la linea: "+(semileft+1) + " en la columna: "+(semiright+1)+"\n");
              }                
              
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statement ::= PRINTF PAR_LEFT ID PAR_RIGHT SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		if(parser.ambito.equals("inicio")){
                Interfaz.error=1;
                Interfaz.salida.setText(Interfaz.salida.getText()+"No pertenece a ninguna funcion, debe estar adentro de una funcion. Error en la linea: "+(semileft+1) + " en la columna: "+(semiright+1)+"\n");
              }else{
                 if(!parser.tablaSim.existeEnTabla(id.toString(),parser.ambito)){ 
                    Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"No se ha declarado la variable: "+id.toString()+" Error En la linea: " +(idleft+1) + " en la columna: "+(idright+1)+"\n");
                   }
              }
              
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement ::= PRINTF PAR_LEFT literal_String PAR_RIGHT SEMICOLON 
            {
              Object RESULT =null;
		int semileft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		if(parser.ambito.equals("inicio")){
                Interfaz.error=1;
                Interfaz.salida.setText(Interfaz.salida.getText()+"No pertenece a ninguna funcion, debe estar adentro de una funcion. Error en la linea: "+(semileft+1) + " en la columna: "+(semiright+1)+"\n");
              }                
              
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statement ::= PRINTF PAR_LEFT literal_String lista_assig2 PAR_RIGHT SEMICOLON 
            {
              Object RESULT =null;
		int semileft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		if(parser.ambito.equals("inicio")){
                Interfaz.error=1;
                Interfaz.salida.setText(Interfaz.salida.getText()+"No pertenece a ninguna funcion, debe estar adentro de una funcion. Error en la linea: "+(semileft+1) + " en la columna: "+(semiright+1)+"\n");
              }                
              
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement ::= op_aritmeticas SEMICOLON 
            {
              Object RESULT =null;
		int semileft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		if(parser.ambito.equals("inicio")){
                Interfaz.error=1;
                Interfaz.salida.setText(Interfaz.salida.getText()+"No pertenece a ninguna funcion, debe estar adentro de una funcion. Error en la linea: "+(semileft+1) + " en la columna: "+(semiright+1)+"\n");
              }                
              
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statement ::= incremento SEMICOLON 
            {
              Object RESULT =null;
		int semileft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		if(parser.ambito.equals("inicio")){
                Interfaz.error=1;
                Interfaz.salida.setText(Interfaz.salida.getText()+"No pertenece a ninguna funcion, debe estar adentro de una funcion. Error en la linea: "+(semileft+1) + " en la columna: "+(semiright+1)+"\n");
              }                
              
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement ::= ID ASSIGNATIONS literal SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		if(!parser.ambito.equals("inicio")){
                 if(parser.tablaSim.existeEnTabla(id.toString(),parser.ambito)){  
                 String[] arreglo = (String[])lit;
                    if(parser.tablaSim.getlinea(id.toString(),parser.ambito).getTipo().toString() == arreglo[1]){
                       parser.tablaSim.getlinea(id.toString(),parser.ambito).setValor(arreglo[0]);
                       // System.out.print(parser.tablaSim.getLineasTabla()+"\n ");
                     }else{
                       Interfaz.error=1;
                       Interfaz.salida.setText(Interfaz.salida.getText()+"Incompatibilidad de tipos en la asignacion "+(parser.tablaSim.getlinea(id.toString(),parser.ambito).getTipo()+" con "+arreglo[1] +", Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n"));                
                     }
                }else{
                    Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"No se ha declarado la variable: "+id.toString()+" Error En la linea: " +(idleft+1) + " en la columna: "+(idright+1)+"\n");
                }
                 }else{
                    Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"No pertenece a ninguna funcion, debe estar adentro de una funcion. Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n");
               }
              
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement ::= ID ASSIGNATIONS literal_String SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int st_litleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int st_litright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Object st_lit = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		if(!parser.ambito.equals("inicio")){ 
                if(parser.tablaSim.existeEnTabla(id.toString(),parser.ambito)){  
                     String[] arreglo = (String[])st_lit;
                        if(parser.tablaSim.getlinea(id.toString(),parser.ambito).getTipo().toString() == arreglo[1]){
                            parser.tablaSim.getlinea(id.toString(),parser.ambito).setValor(arreglo[0]);
                    }else{
                        Interfaz.error=1;
                        Interfaz.salida.setText(Interfaz.salida.getText()+"Incompatibilidad de tipos en la asignacion "+(parser.tablaSim.getlinea(id.toString(),parser.ambito).getTipo() +" con String, Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n"));                
                    }
                }else{
                    Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"No se ha declarado la variable: "+id.toString()+" Error En la linea: " +(idleft+1) + " en la columna: "+(idright+1)+"\n");
                 }
                 }else{
                    Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"No pertenece a ninguna funcion, debe estar adentro de una funcion. Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n");
               }
              
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement ::= ID ASSIGNATIONS ID SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		if(!parser.ambito.equals("inicio")){
                int control1=0;
                int control2=0;
                if(!parser.tablaSim.existeEnTabla(id.toString(),parser.ambito)){
                control1=1;
                Interfaz.error=1;
                Interfaz.salida.setText(Interfaz.salida.getText()+"No se ha declarado la variable: "+id.toString()+" Error En la linea: " +(idleft+1) + " en la columna: "+(idright+1)+"\n");
                }
               if(!parser.tablaSim.existeEnTabla(id1.toString(),parser.ambito)){
                control2=1;
                Interfaz.error=1;
                Interfaz.salida.setText(Interfaz.salida.getText()+"No se ha declarado la variable: "+id1.toString()+" Error En la linea: " +(id1left+1) + " en la columna: "+(id1right+1)+"\n");
                }
                if(control1==0 && control2==0){
                if((parser.tablaSim.getlinea(id1.toString(),parser.ambito)).getValor() == ""){
                Interfaz.error=1;
                Interfaz.salida.setText(Interfaz.salida.getText()+"No se ha asignado valor a la variable: "+id1.toString()+" Error En la linea: " +(id1left+1) + " en la columna: "+(id1right+1)+"\n");
                }                
                if(((parser.tablaSim.getlinea(id.toString(),parser.ambito).getTipo()).toString()) != (parser.tablaSim.getlinea(id1.toString(),parser.ambito).getTipo().toString())){
                    Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"Incompatibilidad de tipos en la asignacion "+(parser.tablaSim.getlinea(id.toString(),parser.ambito).getTipo() +" con "+parser.tablaSim.getlinea(id1.toString(),parser.ambito).getTipo()+  " Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n"));
                
                }else{
                        (parser.tablaSim.getlinea(id.toString(),parser.ambito)).setValor(parser.tablaSim.getlinea(id1.toString(),parser.ambito).getValor());
                        //System.out.print(parser.tablaSim.getLineasTabla()+"\n ");
                }
                }
                }else{
                    Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"No pertenece a ninguna funcion, debe estar adentro de una funcion. Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n");
               }
              
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement ::= ID ASSIGNATIONS ID PAR_LEFT lista_parametros2 PAR_RIGHT SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;
		if(!parser.ambito.equals("inicio")){
                Collections.reverse(parser.paramsId);
                ArrayList<type> temp = new ArrayList<type>();
                int contador =0;
                int control1=0;
                int control2=0;
                if(!parser.tablaSim.existeEnTabla(id.toString(),parser.ambito)){
                control1=1;
                Interfaz.error=1;
                Interfaz.salida.setText(Interfaz.salida.getText()+"No se ha declarado la variable: "+id.toString()+" Error En la linea: " +(idleft+1) + " en la columna: "+(idright+1)+"\n");
                }
                if(!parser.tablaSim.existeEnTabla(id1.toString(),parser.ambito_inicial)){
                control2=1;
                Interfaz.error=1;
                Interfaz.salida.setText(Interfaz.salida.getText()+"No se ha declarado la variable: "+id1.toString()+" Error En la linea: " +(id1left+1) + " en la columna: "+(id1right+1)+"\n");
                }else if(control1==0&& control2==0){
                for(id_params i: parser.id_par){
                        if(i.getId().equals( id1.toString())){
                             if(i.getTipos() != null){
                              temp.addAll(i.getTipos());
                            }
                        }
                    }
                if(parser.tablaSim.getlinea(id.toString(),parser.ambito).getTipo().toString() == parser.tablaSim.getlinea(id1.toString(),parser.ambito_inicial).getTipo().toString()){
                 if(temp.size()!= 0){
                 for(id_params i: parser.id_par){
                   if((i.getId().toString().equals( id1.toString()) && i.getTipos().toString().equals(parser.paramsId.toString()))){
                      contador++;
                    }
                   }
                }else{
                    Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"La funcion: "+id.toString()+"() no recibe ningun parametro . Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n");
               
                    }

                }
                if (contador==0){
                    if(parser.tablaSim.getlinea(id.toString(),parser.ambito).getTipo().toString()!=parser.tablaSim.getlinea(id1.toString(),parser.ambito_inicial).getTipo().toString()){
                         Interfaz.error=1;
                        Interfaz.salida.setText(Interfaz.salida.getText()+"Incompatibilidad en la asignacion,  "+parser.tablaSim.getlinea(id.toString(),parser.ambito).getTipo().toString()+" con "+parser.tablaSim.getlinea(id1.toString(),parser.ambito_inicial).getTipo().toString()+". Error En la linea: " +(id1left+1) + " en la columna: "+(id1right+1)+"\n");                
                    }else{
                      Interfaz.error=1;
                     Interfaz.salida.setText(Interfaz.salida.getText()+"Incompatibilidad de tipos en el envio de los parametros en la funcion: "+id1 +", se esperaba: "+temp.toString()+" Se encontro: "+parser.paramsId+". Error en la linea: "+(id1left+1) + " en la columna: "+(id1right+1)+"\n");
                     }
                }else{
                        parser.tablaSim.getlinea(id.toString(),parser.ambito).setValor(parser.tablaSim.getlinea(id1.toString(),parser.ambito_inicial).getValor().toString());
                    }
                    parser.paramsId.clear();
                    
                    }
                    
                 }else{
                    Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"No pertenece a ninguna funcion, debe estar adentro de una funcion. Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n");
               }
              
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement ::= ID PAR_LEFT lista_parametros2 PAR_RIGHT SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;
		if(!parser.ambito.equals("inicio")){
                 Collections.reverse(parser.paramsId);
                 ArrayList<type> temp = new ArrayList<type>();
                int contador =0;
                if(!parser.tablaSim.existeEnTabla(id.toString(),parser.ambito_inicial)){
                Interfaz.error=1;
                Interfaz.salida.setText(Interfaz.salida.getText()+"No se ha declarado la variable: "+id.toString()+" Error En la linea: " +(idleft+1) + " en la columna: "+(idright+1)+"\n");
                }
                else{
                    for(id_params i: parser.id_par){
                        if(i.getId().equals( id.toString())){
                            if(i.getTipos() != null){
                             temp.addAll(i.getTipos());
                            }
                        }
                    }
                   if(temp.size()!= 0){
                   for(id_params i: parser.id_par){
                   if((i.getId().toString().equals( id.toString()) && i.getTipos().toString().equals(parser.paramsId.toString()))){
                   // System.out.print("\nid1 "+i.getId()+ " id2 "+ id.toString()+" tipo1 "+i.getTipos()+" tipo2 "+ parser.paramsId);
                      contador++;
                      
                    }
                   }
                   if (contador==0){
                      Interfaz.error=1;
                      Interfaz.salida.setText(Interfaz.salida.getText()+"Incompatibilidad de tipos en el envio de los parametros en la funcion: "+id +", se esperaba: "+temp.toString()+" Se encontro: "+parser.paramsId+". Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n");
                    }
                  }else{
                    Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"La funcion: "+id.toString()+"() no recibe ningun parametro . Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n");
               
                  }
                }
                parser.paramsId.clear();
              }else{
                    Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"No pertenece a ninguna funcion, debe estar adentro de una funcion. Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n");
               }

              
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= ID ASSIGNATIONS ID PAR_LEFT PAR_RIGHT SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		if(!parser.ambito.equals("inicio")){
                
                if(!parser.tablaSim.existeEnTabla(id.toString(),parser.ambito)){
                Interfaz.error=1;
                Interfaz.salida.setText(Interfaz.salida.getText()+"No se ha declarado la variable: "+id.toString()+" Error En la linea: " +(idleft+1) + " en la columna: "+(idright+1)+"\n");
                }
               if(!parser.tablaSim.existeEnTabla(id1.toString(),parser.ambito_inicial)){
                Interfaz.error=1;
                Interfaz.salida.setText(Interfaz.salida.getText()+"No se ha declarado la variable: "+id1.toString()+" Error En la linea: " +(id1left+1) + " en la columna: "+(id1right+1)+"\n");
                }else if(parser.tablaSim.getlinea(id.toString(),parser.ambito).getTipo().toString() == parser.tablaSim.getlinea(id1.toString(),parser.ambito_inicial).getTipo().toString()){
                    parser.tablaSim.getlinea(id.toString(),parser.ambito).setValor(parser.tablaSim.getlinea(id1.toString(),parser.ambito_inicial).getValor());
                }
                else{
                    Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"Incompatibilidad en la asignacion,  "+parser.tablaSim.getlinea(id.toString(),parser.ambito).getTipo().toString()+" con "+parser.tablaSim.getlinea(id1.toString(),parser.ambito_inicial).getTipo().toString()+"Error En la linea: " +(id1left+1) + " en la columna: "+(id1right+1)+"\n");
                
                }
                
               }else{
                    Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"No pertenece a ninguna funcion, debe estar adentro de una funcion. Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n");
               }
              
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= tipos ID lista_assig SEMICOLON 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		if(!parser.ambito.equals("inicio")){
                    if(parser.tablaSim.existeEnTabla(id.toString(),parser.ambito)){
                    Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"La variable "+id +" ya fue declarada.  Error En la linea: "+(idleft+1)+" en la columna: "+(idright+1)+"\n");
                    }else{
                         parser.tablaSim.agregar(id.toString(),(type)tipo,parser.ambito,"");
                    }
                    for(String i : parser.lista){
                    if(parser.tablaSim.existeEnTabla(i.toString(),parser.ambito)){
                    Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"La variable "+i +" ya fue declarada. Error En la linea: "+(idleft+1)+" en la columna: "+(idright+1)+"\n");
                    }else{
                        parser.tablaSim.agregar(i.toString(),(type)tipo,parser.ambito,"");
                       // System.out.print(parser.tablaSim.getLineasTabla()+"\n ");
                    }
                 }
                 parser.lista.clear();
                }else{
                    Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"No pertenece a ninguna funcion, debe estar adentro de una funcion. Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n");
               }
              
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= tipos ID SEMICOLON 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		if(!parser.ambito.equals("inicio")){
                if(parser.tablaSim.existeEnTabla(id.toString(),parser.ambito)){
                Interfaz.error=1;
                Interfaz.salida.setText(Interfaz.salida.getText()+"La variable "+id +" ya fue declarada. Error En la linea: "+(idleft+1)+" en la columna: "+(idright+1)+"\n");
                }
                else{
                    parser.tablaSim.agregar(id.toString(),(type)tipo, parser.ambito,"");
                }
                System.out.print(parser.tablaSim.getLineasTabla()+"\n ");
              }else{
                    Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"No pertenece a ninguna funcion, debe estar adentro de una funcion. Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n");
               }
              
              
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= tipos ID ASSIGNATIONS ID PAR_LEFT PAR_RIGHT SEMICOLON 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		if(!parser.ambito.equals("inicio")){
                int control1=0;
                int control2=0;
                if(parser.tablaSim.existeEnTabla(id.toString(),parser.ambito)){
                control1=1;
                Interfaz.error=1;
                Interfaz.salida.setText(Interfaz.salida.getText()+"La variable "+id +" ya fue declarada. Error En la linea: "+(idleft+1)+" en la columna: "+(idright+1)+"\n");
                }
                if(!parser.tablaSim.existeEnTabla(id1.toString(),parser.ambito_inicial)){                 
                control2=1;
                Interfaz.error=1;
                Interfaz.salida.setText(Interfaz.salida.getText()+"No se ha declarado la variable: "+id1.toString()+" Error En la linea: " +(id1left+1) + " en la columna: "+(id1right+1)+"\n");
                }
                if(control1==0 && control2==0){ 
                 if(tipo.toString() == parser.tablaSim.getlinea(id1.toString(),parser.ambito_inicial).getTipo().toString()){
                    parser.tablaSim.agregar(id.toString(),(type)tipo,parser.ambito,parser.tablaSim.getlinea(id1.toString(),parser.ambito_inicial).getValor());
                }else{
                Interfaz.error=1;
                Interfaz.salida.setText(Interfaz.salida.getText()+"Incompatibilidad de tipos en la asignacion "+tipo.toString() +" con "+parser.tablaSim.getlinea(id1.toString(),parser.ambito).getTipo()+  ", Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n");
                }
                }
                }else{
                    Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"No pertenece a ninguna funcion, debe estar adentro de una funcion. Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n");
               }
              
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= tipo_void ID PAR_LEFT lista_parametros PAR_RIGHT BRACK_LEFT NT$8 statements BRACK_RIGHT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-8)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-8)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)).value;
		if(parser.control !=1){
                 parser.resetAmbito();
                }else{
                 parser.control =0;
                 }
               
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-8)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$8 ::= 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;
if(parser.ambito.equals("inicio")){
                if(parser.tablaSim.existeEnTabla(id.toString(),parser.ambito)){
                Interfaz.error=1;
                Interfaz.salida.setText(Interfaz.salida.getText()+"La variable "+id +" ya fue declarada. Error En la linea: "+(idleft+1)+" en la columna: "+(idright+1)+"\n");
                }else{
                    Collections.reverse(parser.parametros);
                    type[] temp = new type[parser.parametros.size()];
                    int contador =0;
                    for(type i :parser.parametros){
                        temp[contador] = i;
                        contador++;
                    }
                    
                    lineaTabla funcioncita=new lineaTabla(id.toString(),new functionType(parser.parametros,(type)tipo),parser.ambito,"",0);
                    parser.id_par.add(new id_params(id.toString(),parser.parametros));
                    parser.tablaSim.agregar(funcioncita);
                    parser.agregarAmbito(id.toString());
                    Collections.reverse(parser.paramsId);
                    int cont =0;
                    for(String i : parser.paramsId){
                        if(parser.tablaSim.existeEnTabla(i.toString(),parser.ambito)){
                        Interfaz.error=1;
                        Interfaz.salida.setText(Interfaz.salida.getText()+"La variable "+i +" ya fue declarada. Error En la linea: "+(idleft+1)+" en la columna: "+(idright+1)+"\n");
                        }else{
                            parser.tablaSim.agregar(i.toString(),temp[cont],parser.ambito,"");
                            cont++;
                        }
                   }
                }
                parser.parametros.clear();
                  parser.paramsId.clear();
                  }else{
                    parser.control =1;
                    Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"No puede declararse una funcion dentro de una funcion. Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n");
                    parser.parametros.clear();
                  parser.paramsId.clear();
               }
              
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$8",28, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= tipos ID ASSIGNATIONS ID PAR_LEFT lista_parametros2 PAR_RIGHT SEMICOLON 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;
		if(!parser.ambito.equals("inicio")){
                Collections.reverse(parser.paramsId);
                 int control1=0;
                int control2=0;
                 ArrayList<type> temp = new ArrayList<type>();
                int contador =0;
                if(parser.tablaSim.existeEnTabla(id.toString(),parser.ambito)){
                    control1=1;
                    Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"La variable "+id.toString() +" ya fue declarada. Error En la linea: "+(idleft+1)+" en la columna: "+(idright+1)+"\n");
                }else{
                    parser.tablaSim.agregar(id.toString(),(type)tipo,parser.ambito,"");
                }
                if(!parser.tablaSim.existeEnTabla(id1.toString(),parser.ambito_inicial)){
                control2=1;
                Interfaz.error=1;
                Interfaz.salida.setText(Interfaz.salida.getText()+"No se ha declarado la variable: "+id1.toString()+" Error En la linea: " +(id1left+1) + " en la columna: "+(id1right+1)+"\n");
                }if(control1==0 && control2==0){ 
                for(id_params i: parser.id_par){
                        if(i.getId().equals( id1.toString())){
                              if(i.getTipos() != null){
                            temp.addAll(i.getTipos());
                            }
                        }
                    }
                if(parser.tablaSim.getlinea(id.toString(),parser.ambito).getTipo().toString() == parser.tablaSim.getlinea(id1.toString(),parser.ambito_inicial).getTipo().toString()){
                if(temp.size() !=0){
               for(id_params i: parser.id_par){
                   if((i.getId().toString().equals( id1.toString()) && i.getTipos().toString().equals(parser.paramsId.toString()))){
                      contador++;
                    }
                   }
                }else{
                    Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"La funcion: "+id.toString()+"() no recibe ningun parametro . Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n");
               
                    }
                }
                if (contador==0){
                      Interfaz.error=1;
                      Interfaz.salida.setText(Interfaz.salida.getText()+"Incompatibilidad de tipos en el envio de los parametros en la funcion: "+id1 +", se esperaba: "+temp.toString()+" Se encontro: "+parser.paramsId+". Error en la linea: "+(id1left+1) + " en la columna: "+(id1right+1)+"\n");
                    }else{
                        parser.tablaSim.getlinea(id.toString(),parser.ambito).setValor(parser.tablaSim.getlinea(id1.toString(),parser.ambito_inicial).getValor().toString());
                    }
                    parser.paramsId.clear();
                    }
                }else{
                    Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"No pertenece a ninguna funcion, debe estar adentro de una funcion. Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n");
               }
              
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= tipos ID ASSIGNATIONS ID SEMICOLON 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		if(!parser.ambito.equals("inicio")){
                if(parser.tablaSim.existeEnTabla(id.toString(),parser.ambito)){
                Interfaz.error=1;
                Interfaz.salida.setText(Interfaz.salida.getText()+"La variable "+id +" ya fue declarada. Error En la linea: "+(idleft+1)+" en la columna: "+(idright+1)+"\n");
                }
                if(!parser.tablaSim.existeEnTabla(id1.toString(),parser.ambito)){                 
                Interfaz.error=1;
                Interfaz.salida.setText(Interfaz.salida.getText()+"No se ha declarado la variable: "+id1.toString()+" Error En la linea: " +(id1left+1) + " en la columna: "+(id1right+1)+"\n");
                }else if(tipo.toString() == ((parser.tablaSim.getlinea(id1.toString(),parser.ambito)).getTipo()).toString()){
                    parser.tablaSim.agregar(id.toString(),(type)tipo,parser.ambito,parser.tablaSim.getlinea(id1,parser.ambito).getValor());
                   // System.out.print(parser.tablaSim.getLineasTabla()+"\n ");
                }   
                else{
                Interfaz.error=1;
                Interfaz.salida.setText(Interfaz.salida.getText()+"Incompatibilidad de tipos en la asignacion "+tipo.toString() +" con "+parser.tablaSim.getlinea(id1.toString(),parser.ambito).getTipo()+  ", Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n");
                }
               }else{
                    Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"No pertenece a ninguna funcion, debe estar adentro de una funcion. Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n");
               }
              
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= tipos ID ASSIGNATIONS literal SEMICOLON 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		if(!parser.ambito.equals("inicio")){
                    String[] arreglo = (String[])lit;   
                    if(parser.tablaSim.existeEnTabla(id.toString(),parser.ambito)){
                    Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"La variable "+id +" ya fue declarada. Error En la linea: "+(idleft+1)+" en la columna: "+(idright+1)+"\n");
              }else{
                    if(tipo.toString() == arreglo[1]){                   
                    parser.tablaSim.agregar(id.toString(),(type)tipo,parser.ambito, arreglo[0]);
                 //System.out.print(parser.tablaSim.getLineasTabla()+ "\n");
                    }else{
                            Interfaz.error=1;
                            Interfaz.salida.setText(Interfaz.salida.getText()+"Incompatibilidad de tipos en la asignacion "+tipo.toString() +" con "+arreglo[1]+", Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n");                               
                        }
                    }
                 }else{
                    Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"No pertenece a ninguna funcion, debe estar adentro de una funcion. Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n");
               }
              
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= tipos ID ASSIGNATIONS literal_String SEMICOLON 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		if(!parser.ambito.equals("inicio")){
                  if(parser.tablaSim.existeEnTabla(id.toString(),parser.ambito)){
                    Interfaz.error=1;
                     Interfaz.salida.setText(Interfaz.salida.getText()+"La variable "+id +" ya fue declarada. Error En la linea: "+(idleft+1)+" en la columna: "+(idright+1)+"\n");
                   }else{
                        if(tipo.toString() == "string"){
                             String[] arreglo = (String[])lit;
                            parser.tablaSim.agregar(id.toString(),(type)tipo,parser.ambito,arreglo[0]);
                           // System.out.print("\n "+parser.tablaSim.getLineasTabla());
                        }
                        else{
                            Interfaz.error=1;
                            Interfaz.salida.setText(Interfaz.salida.getText()+"Incompatibilidad de tipos en la asignacion "+tipo.toString() +" con String, Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n");                               
                        }
                    }
                 }else{
                    Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"No pertenece a ninguna funcion, debe estar adentro de una funcion. Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n");
               }
                
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= tipos ID PAR_LEFT PAR_RIGHT BRACK_LEFT NT$7 statements return_value SEMICOLON BRACK_RIGHT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-9)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-9)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-8)).value;
		int retleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int retright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Object ret = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		 if(parser.control !=1){
                if(ret.equals("psps323ps")||ret.equals("pasalwlw323")||ret.equals("blalblablaba")||ret.equals("blalbla33blaba")){
                    
                     if(ret.equals("blalblablaba")){
                       
                         parser.tablaSim.getlinea(id.toString(),parser.ambito_inicial).setValor(parser.expression);
                        
                    }
                    if(ret.equals("blalbla33blaba")){
                       
                        for(String i: parser.tipitos){
                           if(i == tipo.toString()){
                                parser.tablaSim.getlinea(id.toString(),parser.ambito_inicial).setValor(parser.expression);
                            }
                            else{
                                Interfaz.error=1;
                                Interfaz.salida.setText(Interfaz.salida.getText()+"ERROR: Incompatibilidad de tipos de retorno, se esperaba: "+tipo.toString() +" ,se encontro: "+i+  ", Error en la linea: "+(retleft+1) + " en la columna: "+(retright+1)+"\n");
                             }
                        }
                        
                    }
                    
                     if(parser.tipito != tipo.toString()){
                        Interfaz.error=1;
                        Interfaz.salida.setText(Interfaz.salida.getText()+"ERROR: Incompatibilidad de tipos de retorno, se esperaba: "+tipo.toString() +" ,se encontro: "+parser.tipito+  ", Error en la linea: "+(retleft+1) + " en la columna: "+(retright+1)+"\n");
                     }
                     
                    // parser.tipito ="";
                     parser.paramsId.clear();
                     parser.resetAmbito();
                     parser.tipitos.clear();
                }else{
                if(ret instanceof String[]){
                String[] arreglo = (String[])ret;
                parser.resetAmbito();
                if(tipo.toString() == arreglo[1]){
                parser.tablaSim.getlinea(id.toString(),parser.ambito).setValor(arreglo[0]);
                }else{
                    Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"Incompatibilidad de tipo de retorno se esperaba: "+tipo.toString() +" se encontro: "+arreglo[1] +", Error en la linea: "+(retleft+1) + " en la columna: "+(retright+1)+"\n");                                                      
                  }
               }
               else{
                if(parser.tablaSim.existeEnTabla(ret.toString(),parser.ambito)){
                    if(tipo.toString() == parser.tablaSim.getlinea(ret.toString(),parser.ambito).getTipo().toString()){
                        String s = parser.ambito; 
                        parser.resetAmbito();
                        parser.tablaSim.getlinea(id.toString(),parser.ambito).setValor(parser.tablaSim.getlinea(ret.toString(),s).getValor());
                   }else{
                        Interfaz.error=1;
                        Interfaz.salida.setText(Interfaz.salida.getText()+"Incompatibilidad de tipo de retorno se esperaba: "+tipo.toString() +" se encontro: "+parser.tablaSim.getlinea(ret.toString(),parser.ambito).getTipo().toString() +", Error en la linea: "+(retleft+1) + " en la columna: "+(retright+1)+"\n");                                                      
                   }
                }else{
                     Interfaz.error=1;
                     Interfaz.salida.setText(Interfaz.salida.getText()+"No se ha declarado la variable: "+ret.toString()+" Error En la linea: " +(retleft+1) + " en la columna: "+(retright+1)+"\n");               
                 }
               }
              }
              }else{
                 parser.control =0;
                 }
                
              
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-9)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$7 ::= 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
if(parser.ambito.equals("inicio")){
                if(parser.tablaSim.existeEnTabla(id.toString(),parser.ambito)){
                    Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"La variable "+id +" ya fue declarada. Error En la linea: "+(idleft+1)+" en la columna: "+(idright+1)+"\n");
                }else{
                    lineaTabla funcioncita=new lineaTabla(id.toString(),new functionType(null,(type)tipo),parser.ambito,"",0);
                parser.id_par.add(new id_params(id.toString()));
                parser.tablaSim.agregar(funcioncita);
                }
                parser.agregarAmbito(id.toString());
                
                }else{
                    parser.control =1;
                    Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"No puede declararse una funcion dentro de una funcion. Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n");
               }  
              
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$7",27, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= tipos ID PAR_LEFT lista_parametros PAR_RIGHT BRACK_LEFT NT$6 statements return_value SEMICOLON BRACK_RIGHT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-10)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-10)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-10)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-9)).value;
		int retleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int retright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Object ret = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		 if(parser.control !=1){
                 if(ret.equals("psps323ps")||ret.equals("pasalwlw323")||ret.equals("blalblablaba")||ret.equals("blalbla33blaba")){
                    
                     if(ret.equals("blalblablaba")){
                       
                         parser.tablaSim.getlinea(id.toString(),parser.ambito_inicial).setValor(parser.expression);
                        
                    }
                    if(ret.equals("blalbla33blaba")){
                       
                        for(String i: parser.tipitos){
                            if(i == tipo.toString()){
                                parser.tablaSim.getlinea(id.toString(),parser.ambito_inicial).setValor(parser.expression);
                            }
                            else{
                                Interfaz.error=1;
                                Interfaz.salida.setText(Interfaz.salida.getText()+"ERROR: Incompatibilidad de tipos de retorno, se esperaba: "+tipo.toString() +" ,se encontro: "+i+  ", Error en la linea: "+(retleft+1) + " en la columna: "+(retright+1)+"\n");
                             }
                        }
                        
                    }
                    
                     if(parser.tipito != tipo.toString()){
                        Interfaz.error=1;
                        Interfaz.salida.setText(Interfaz.salida.getText()+"ERROR: Incompatibilidad de tipos de retorno, se esperaba: "+tipo.toString() +" ,se encontro: "+parser.tipito+  ", Error en la linea: "+(retleft+1) + " en la columna: "+(retright+1)+"\n");
                     }
                     
                    // parser.tipito ="";
                     parser.paramsId.clear();
                     parser.resetAmbito();
                     parser.tipitos.clear();
                }
                else{
                if(ret instanceof String[]){
                String[] arreglo = (String[])ret;
                parser.resetAmbito();
                if(tipo.toString() == arreglo[1]){
                parser.tablaSim.getlinea(id.toString(),parser.ambito).setValor(arreglo[0]);
           
                }else{
                    Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"Incompatibilidad de tipo de retorno se esperaba: "+tipo.toString() +" se encontro: "+arreglo[1] +", Error en la linea: "+(retleft+1) + " en la columna: "+(retright+1)+"\n");                                                      
                  }
               }
               else{
                if(parser.tablaSim.existeEnTabla(ret.toString(),parser.ambito)){
                    if(tipo.toString() == parser.tablaSim.getlinea(ret.toString(),parser.ambito).getTipo().toString()){
                        String s = parser.ambito; 
                        parser.resetAmbito();
                        parser.tablaSim.getlinea(id.toString(),parser.ambito).setValor(parser.tablaSim.getlinea(ret.toString(),s).getValor());
                   }else{
                        Interfaz.error=1;
                        Interfaz.salida.setText(Interfaz.salida.getText()+"Incompatibilidad de tipo de retorno se esperaba: "+tipo.toString() +" se encontro: "+parser.tablaSim.getlinea(ret.toString(),parser.ambito).getTipo().toString() +", Error en la linea: "+(retleft+1) + " en la columna: "+(retright+1)+"\n");                                                      
                   }
                }else{
                     Interfaz.error=1;
                     Interfaz.salida.setText(Interfaz.salida.getText()+"No se ha declarado la variable: "+ret.toString()+" Error En la linea: " +(retleft+1) + " en la columna: "+(retright+1)+"\n");               
                 }
               }
              }
              }else{
                 parser.control =0;
                 }
              
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-10)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$6 ::= 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;
if(parser.ambito.equals("inicio")){
                if(parser.tablaSim.existeEnTabla(id.toString(),parser.ambito)){
                    Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"La variable "+id +" ya fue declarada. Error En la linea: "+(idleft+1)+" en la columna: "+(idright+1)+"\n");
                }else{
                         Collections.reverse(parser.parametros);
                    type[] temp = new type[parser.parametros.size()];
                    int contador =0;
                    for(type i :parser.parametros){
                        temp[contador] = i;
                        contador++;
                    }
                    lineaTabla funcioncita=new lineaTabla(id.toString(),new functionType(parser.parametros,(type)tipo),parser.ambito,"",0);
                    parser.id_par.add(new id_params(id.toString(),parser.parametros));
                    parser.tablaSim.agregar(funcioncita);
                    parser.agregarAmbito(id.toString());
                    Collections.reverse(parser.paramsId);
                    int cont =0;
                    for(String i : parser.paramsId){
                            if(parser.tablaSim.existeEnTabla(i.toString(),parser.ambito)){
                            Interfaz.error=1;
                            Interfaz.salida.setText(Interfaz.salida.getText()+"La variable "+i +" ya fue declarada. Error En la linea: "+(idleft+1)+" en la columna: "+(idright+1)+"\n");
                            }else{
                                parser.tablaSim.agregar(i.toString(),temp[cont],parser.ambito,"");
                             //  System.out.print(parser.tablaSim.getLineasTabla()+"\n ");
                                cont++;
                            }
                   }
                }
                parser.parametros.clear();
               parser.paramsId.clear();
               }else{
                    parser.control =1;
                    Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"No puede declararse una funcion dentro de una funcion. Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n");
                    parser.parametros.clear();
                    parser.paramsId.clear();
               }
              
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$6",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= tipo_void ID PAR_LEFT PAR_RIGHT BRACK_LEFT NT$5 statements BRACK_RIGHT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)).value;
		if(parser.control!=1){
                parser.resetAmbito();               
                 }else{
                 parser.control =0;
                 }
              
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$5 ::= 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
if(parser.ambito.equals("inicio")){
                if(parser.tablaSim.existeEnTabla(id.toString(),parser.ambito)){
                    Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"La variable "+id +" ya fue declarada. Error En la linea: "+(idleft+1)+" en la columna: "+(idright+1)+"\n");
                }else{
                lineaTabla funcioncita=new lineaTabla(id.toString(),new functionType(null,(type)tipo),parser.ambito,"",0);
                parser.id_par.add(new id_params(id.toString()));
                parser.tablaSim.agregar(funcioncita);
                }
                parser.agregarAmbito(id.toString());
                 }else{
                    parser.control =1;
                    Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"No puede declararse una funcion dentro de una funcion. Error en la linea: "+(idleft+1) + " en la columna: "+(idright+1)+"\n");
               }
              
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$5",25, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= WHILE PAR_LEFT asig_or_and PAR_RIGHT BRACK_LEFT NT$4 statements BRACK_RIGHT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int while2left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)).left;
		int while2right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)).right;
		Object while2 = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)).value;
		//parser.resetAmbito();
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$4 ::= 
            {
              Object RESULT =null;
		int while2left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int while2right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		Object while2 = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;
if(parser.ambito.equals("inicio")){
                Interfaz.error=1;
                Interfaz.salida.setText(Interfaz.salida.getText()+"No pertenece a ninguna funcion, debe estar adentro de una funcion. Error en la linea: "+(while2left+1) + " en la columna: "+(while2right+1)+"\n");
               }else{
                   //parser.agregarAmbito("while"+parser.genNombre()); 
               }
                
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$4",24, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= FOR PAR_LEFT inicial SEMICOLON assignaciones SEMICOLON incremento PAR_RIGHT BRACK_LEFT NT$3 statements BRACK_RIGHT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int fortleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-11)).left;
		int fortright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-11)).right;
		Object fort = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-11)).value;
		int inicialleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-9)).left;
		int inicialright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-9)).right;
		Object inicial = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-9)).value;
		int assigleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)).left;
		int assigright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)).right;
		Object assig = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)).value;
		//parser.resetAmbito();
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-11)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$3 ::= 
            {
              Object RESULT =null;
		int fortleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-8)).left;
		int fortright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-8)).right;
		Object fort = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-8)).value;
		int inicialleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)).left;
		int inicialright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)).right;
		Object inicial = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)).value;
		int assigleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int assigright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		Object assig = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;
if(parser.ambito.equals("inicio")){
                Interfaz.error=1;
                Interfaz.salida.setText(Interfaz.salida.getText()+"No pertenece a ninguna funcion, debe estar adentro de una funcion. Error en la linea: "+(fortleft+1) + " en la columna: "+(fortright+1)+"\n");
               }else{
               //parser.agregarAmbito("for"+parser.genNombre());
               }
                
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$3",23, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= IF PAR_LEFT asig_or_and PAR_RIGHT BRACK_LEFT statements BRACK_RIGHT ELSEIF PAR_LEFT asig_or_and PAR_RIGHT BRACK_LEFT statements BRACK_RIGHT elseif_stment ELSE BRACK_LEFT NT$2 statements BRACK_RIGHT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int ifsleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-19)).left;
		int ifsright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-19)).right;
		Object ifs = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-19)).value;
		//parser.resetAmbito();
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-19)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$2 ::= 
            {
              Object RESULT =null;
		int ifsleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-16)).left;
		int ifsright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-16)).right;
		Object ifs = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-16)).value;
if(parser.ambito.equals("inicio")){
                Interfaz.error=1;
                Interfaz.salida.setText(Interfaz.salida.getText()+"No pertenece a ninguna funcion, debe estar adentro de una funcion. Error en la linea: "+(ifsleft+1) + " en la columna: "+(ifsright+1)+"\n");
              }else{
                 //parser.agregarAmbito("if"+parser.genNombre()); 
              }
                
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$2",22, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= IF PAR_LEFT asig_or_and PAR_RIGHT BRACK_LEFT statements BRACK_RIGHT ELSEIF PAR_LEFT asig_or_and PAR_RIGHT BRACK_LEFT statements BRACK_RIGHT ELSE BRACK_LEFT NT$1 statements BRACK_RIGHT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int ifsleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-18)).left;
		int ifsright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-18)).right;
		Object ifs = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-18)).value;
		//parser.resetAmbito();
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-18)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$1 ::= 
            {
              Object RESULT =null;
		int ifsleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-15)).left;
		int ifsright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-15)).right;
		Object ifs = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-15)).value;
if(parser.ambito.equals("inicio")){
                Interfaz.error=1;
                Interfaz.salida.setText(Interfaz.salida.getText()+"No pertenece a ninguna funcion, debe estar adentro de una funcion. Error en la linea: "+(ifsleft+1) + " en la columna: "+(ifsright+1)+"\n");
              }else{
                 //parser.agregarAmbito("if"+parser.genNombre()); 
              }
                
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$1",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= IF PAR_LEFT asig_or_and PAR_RIGHT BRACK_LEFT statements BRACK_RIGHT ELSEIF PAR_LEFT asig_or_and PAR_RIGHT BRACK_LEFT statements BRACK_RIGHT elseif_stment 
            {
              Object RESULT =null;
		int ifsleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-14)).left;
		int ifsright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-14)).right;
		Object ifs = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-14)).value;
		if(parser.ambito.equals("inicio")){
                Interfaz.error=1;
                Interfaz.salida.setText(Interfaz.salida.getText()+"No pertenece a ninguna funcion, debe estar adentro de una funcion. Error en la linea: "+(ifsleft+1) + " en la columna: "+(ifsright+1)+"\n");
              
              }
                
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-14)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= IF PAR_LEFT asig_or_and PAR_RIGHT BRACK_LEFT statements BRACK_RIGHT ELSEIF PAR_LEFT asig_or_and PAR_RIGHT BRACK_LEFT statements BRACK_RIGHT 
            {
              Object RESULT =null;
		int ifsleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-13)).left;
		int ifsright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-13)).right;
		Object ifs = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-13)).value;
		if(parser.ambito.equals("inicio")){
                Interfaz.error=1;
                Interfaz.salida.setText(Interfaz.salida.getText()+"No pertenece a ninguna funcion, debe estar adentro de una funcion. Error en la linea: "+(ifsleft+1) + " en la columna: "+(ifsright+1)+"\n");
               }else{
                 parser.agregarAmbito("if"+parser.genNombre()); 
              }
                
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-13)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= IF PAR_LEFT asig_or_and PAR_RIGHT BRACK_LEFT statements BRACK_RIGHT ELSE BRACK_LEFT statements BRACK_RIGHT 
            {
              Object RESULT =null;
		int ifsleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-10)).left;
		int ifsright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-10)).right;
		Object ifs = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-10)).value;
		if(parser.ambito.equals("inicio")){
                Interfaz.error=1;
                Interfaz.salida.setText(Interfaz.salida.getText()+"No pertenece a ninguna funcion, debe estar adentro de una funcion. Error en la linea: "+(ifsleft+1) + " en la columna: "+(ifsright+1)+"\n");
              }else{
                 //parser.agregarAmbito("if"+parser.genNombre()); 
              }
                
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-10)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= IF PAR_LEFT asig_or_and PAR_RIGHT BRACK_LEFT statements BRACK_RIGHT 
            {
              Object RESULT =null;
		int ifsleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)).left;
		int ifsright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)).right;
		Object ifs = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)).value;
		if(parser.ambito.equals("inicio")){
                Interfaz.error=1;
                Interfaz.salida.setText(Interfaz.salida.getText()+"No pertenece a ninguna funcion, debe estar adentro de una funcion. Error en la linea: "+(ifsleft+1) + " en la columna: "+(ifsright+1)+"\n");
              
              }
                
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= INT MAIN PAR_LEFT PAR_RIGHT BRACK_LEFT NT$0 statements RETURN literal SEMICOLON BRACK_RIGHT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).value;
		int linealeft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-10)).left;
		int linearight = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-10)).right;
		Object linea = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-10)).value;
		parser.resetAmbito();
             
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-10)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$0 ::= 
            {
              Object RESULT =null;
		int linealeft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int linearight = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		Object linea = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;
Interfaz.error_main = Interfaz.error_main+1;
                Interfaz.error_main = Interfaz.error_main2+1;
                if(!parser.ambito.equals("inicio")){
                    Interfaz.error=1;
                    Interfaz.salida.setText(Interfaz.salida.getText()+"ERROR: El main no puede estar adentro de otra funcion, en la linea: "+(linealeft+1)+" en la columna: "+(linearight+1)+"\n");
                 }
                if(parser.tablaSim.existeEnTabla("main","inicio")){
                    
                    Interfaz.salida.setText(Interfaz.salida.getText()+"No puede estar declarado mas de un Main(), en la linea: "+(linealeft+1)+" en la columna: "+(linearight+1)+"\n");
                }
                else{
                    //parser.tablaSim.agregar("main",new integerType(),"inicio","");
                    parser.agregarAmbito("main");
                   // System.out.print(parser.tablaSim.getLineasTabla()+ "\n");
                }
             
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$0",20, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statements ::= statement 
            {
              Object RESULT =null;
		if (parser.tablaSim.getLineasTabla().size() != 0){
                    Interfaz.tabla =parser.tablaSim;
                }
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statements",3, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statements ::= statement statements 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statements",3, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= statements 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("inicio",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		RESULT = start_val;
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador$parser.done_parsing();
          return CUP$Analizador$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

